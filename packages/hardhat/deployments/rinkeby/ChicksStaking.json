{
  "address": "0xb62c3A470d7Ae8dBb1B114a91Eb148bd5A73F13e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_chicksAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eggAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_chicksAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_eggAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowClaiming",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowStaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "apprUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "calcRewardPerDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "claimAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cycleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAllRewardedToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRewardedToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getStakedTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "chicksAddress",
          "type": "address"
        }
      ],
      "name": "setChicksContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "eggAddress",
          "type": "address"
        }
      ],
      "name": "setEggContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "stakeArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleAllowClaiming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleAllowStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "unstakeArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3067b42ab5a06f312acfa018951551098b4bdc363a56c40056051b44418d4766",
  "receipt": {
    "to": null,
    "from": "0xf5aF44B2e01445cD2093CE254CD95b80354fCC97",
    "contractAddress": "0xb62c3A470d7Ae8dBb1B114a91Eb148bd5A73F13e",
    "transactionIndex": 47,
    "gasUsed": "1720900",
    "logsBloom": "0x
    "blockHash": "0x89b443486a3b491dbbc795ea72a03f1af0992abe9f2c41fdfefc8f6f44dbb264",
    "transactionHash": "0x3067b42ab5a06f312acfa018951551098b4bdc363a56c40056051b44418d4766",
    "logs": [
      {
        "transactionIndex": 47,
        "blockNumber": 10457668,
        "transactionHash": "0x3067b42ab5a06f312acfa018951551098b4bdc363a56c40056051b44418d4766",
        "address": "0xb62c3A470d7Ae8dBb1B114a91Eb148bd5A73F13e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5af44b2e01445cd2093ce254cd95b80354fcc97"
        ],
        "data": "0x",
        "logIndex": 90,
        "blockHash": "0x89b443486a3b491dbbc795ea72a03f1af0992abe9f2c41fdfefc8f6f44dbb264"
      }
    ],
    "blockNumber": 10457668,
    "cumulativeGasUsed": "15030409",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd80A5574dC8841A67837eadBe1c5e301c9eb8377",
    "0x509CE56Ea7e4474D5c7F6D00095fB33219308Ea3"
  ],
  "numDeployments": 11,
  "solcInputHash": "fb0cd9b8ea48e1853064605b4399ef53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chicksAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eggAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_chicksAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_eggAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowClaiming\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"apprUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calcRewardPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cycleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllRewardedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRewardedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chicksAddress\",\"type\":\"address\"}],\"name\":\"setChicksContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eggAddress\",\"type\":\"address\"}],\"name\":\"setEggContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAllowClaiming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAllowStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getStakedTokens(address)\":{\"details\":\"Getter functions for NFTStaking contractGet the tokens staked by a user\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"stakeArray(uint256[])\":{\"notice\":\"Stake NFTs and earn reward tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ChicksStaking.sol\":\"ChicksStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/Chicks.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n///@consensys SWC-103\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract Chicks is ERC721Enumerable, Ownable {\\r\\n    //For nft staking.\\r\\n    mapping(uint256 => address) public _ownedTokens;\\r\\n\\r\\n    // Optional mapping for token URIs  \\r\\n    mapping (uint256 => string) private _tokenURIs;\\r\\n    string private baseURI;\\r\\n    string public baseExtension     = \\\".json\\\";\\r\\n    string public metaDataFolder    = \\\"\\\";\\r\\n    string public notRevealedUri    =  \\\"\\\";\\r\\n    string public _name;\\r\\n    string public _symbol;\\r\\n\\r\\n    uint256 public cost             =   0.0499 ether;    \\r\\n    uint256 public maxSupply        =   10000;\\r\\n    uint256 public remainTokenAmount=   10000;\\r\\n    uint256 public maxMintAmount    =   100;   \\r\\n    uint256 public nftPerAddressLimit=  100;\\r\\n    uint256 public onlyWhitelisted     = 0;\\r\\n    uint256 public revealed            = 1;\\r\\n    uint256 public paused              = 0;\\r\\n\\r\\n    address[] public whitelistedAddresses;\\r\\n    mapping(address => uint256) public addressMintedBalance;\\r\\n    \\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        string memory _initBaseURI\\r\\n    ) ERC721(_name, _symbol) {\\r\\n        setBaseURI(_initBaseURI);\\r\\n    }\\r\\n\\r\\n    // internal\\r\\n    // convenience function to return the baseURI\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    // public\\r\\n    function mint(address _to, uint256 _mintAmount) public payable {\\r\\n        uint256 supply = totalSupply();\\r\\n        require(paused == 0, \\\"Mint is paused\\\");\\r\\n        require(msg.sender != address(0x0), \\\"Recipient should be present\\\");\\r\\n        require(_mintAmount > 0, \\\"Need to mint at least 1 NFT\\\");\\r\\n        require(remainTokenAmount > 0, \\\"Max NFT limit exceeded\\\");\\r\\n\\r\\n        if (msg.sender != owner()) {\\r\\n            if (onlyWhitelisted == 1) {\\r\\n                require(isWhitelisted(msg.sender), \\\"User is not whitelisted\\\");\\r\\n                uint256 ownerMintedCount = addressMintedBalance[msg.sender];\\r\\n                require(\\r\\n                    ownerMintedCount + _mintAmount <= nftPerAddressLimit,\\r\\n                    \\\"Max NFT per address exceeded\\\"\\r\\n                );\\r\\n            }\\r\\n            //if owner change cost then frontend must be changed\\r\\n            require(msg.value != 0, \\\"Royalty value should be positive\\\" );\\r\\n            require(msg.value >= cost * _mintAmount, \\\"Insufficient funds\\\");\\r\\n            require(_mintAmount <= maxMintAmount, \\\"Max mint amount per session exceeded\\\");\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 1; i <= _mintAmount; i++) {\\r\\n            _safeMint(_to, supply + i);\\r\\n            addressMintedBalance[msg.sender]++;\\r\\n            remainTokenAmount--;\\r\\n        }\\r\\n        if(remainTokenAmount % 1000 == 0){\\r\\n            paused = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isWhitelisted(address _user) public view returns (bool) {\\r\\n        for (uint256 i = 0; i < whitelistedAddresses.length; i++) {\\r\\n            if (whitelistedAddresses[i] == _user) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    // return all NFTs for a particular owner\\r\\n    function walletOfOwner(address _owner)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 ownerTokenCount = balanceOf(_owner);\\r\\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\r\\n        for (uint256 i; i < ownerTokenCount; i++) {\\r\\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\r\\n        }\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        string memory base = _baseURI();\\r\\n\\r\\n        if(revealed == 0) return notRevealedUri;\\r\\n    \\r\\n        // If there is no base URI, return the token URI.\\r\\n        if (bytes(base).length == 0) {\\r\\n            return _tokenURI;\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n        if (bytes(_tokenURI).length > 0) {\\r\\n            return string(abi.encodePacked(base, _tokenURI, baseExtension));\\r\\n        }\\r\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\r\\n        return string(abi.encodePacked(base, Strings.toString(tokenId), baseExtension));\\r\\n    }\\r\\n\\r\\n\\r\\n    //to be seen how many collections are minted and remained in frontend \\r\\n    function setRareTokenURL(uint256 tokenId, string memory _rareURI)  public onlyOwner {\\r\\n        _tokenURIs[tokenId] = _rareURI;\\r\\n    }\\r\\n\\r\\n    //to be seen how many collections are minted and remained in frontend \\r\\n    function getRemainCollections() public view returns (uint256) {\\r\\n        return remainTokenAmount;\\r\\n    }\\r\\n\\r\\n    function setRemainCollections(uint256 remainNFT) public onlyOwner{\\r\\n        remainTokenAmount = remainNFT;\\r\\n    }\\r\\n    //to be seen how many nfts user minted and can mint\\r\\n    function getRemainNFTforUser() public view returns (uint256) {\\r\\n        uint256 amount;\\r\\n        if (msg.sender != owner()) {\\r\\n            amount = nftPerAddressLimit - addressMintedBalance[msg.sender];\\r\\n        }else {\\r\\n            amount = 200;\\r\\n        }\\r\\n        return amount;\\r\\n    }       \\r\\n\\r\\n    //only owner\\r\\n    function reveal() public onlyOwner {\\r\\n        revealed = 1;\\r\\n    }\\r\\n\\r\\n    function setNftPerAddressLimit(uint256 _limit) public onlyOwner {\\r\\n        nftPerAddressLimit = _limit;\\r\\n    }\\r\\n\\r\\n    function setCost(uint256 _newCost) public onlyOwner {\\r\\n        cost = _newCost;\\r\\n    }\\r\\n\\r\\n    function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\\r\\n        maxMintAmount = _newmaxMintAmount;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n        baseURI = _newBaseURI;\\r\\n    }\\r\\n\\r\\n    function setBaseExtension(string memory _newBaseExtension)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        baseExtension = _newBaseExtension;\\r\\n    }\\r\\n\\r\\n    function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\\r\\n        notRevealedUri = _notRevealedURI;\\r\\n    }\\r\\n\\r\\n    function pause(bool _state) public onlyOwner {\\r\\n        if(_state) paused = 1;\\r\\n        else paused = 0;\\r\\n    }\\r\\n\\r\\n    function isPaused() public view returns (uint256) {\\r\\n        return paused;\\r\\n    }\\r\\n\\r\\n    function setOnlyWhitelisted(uint256 _state) public onlyOwner {\\r\\n        onlyWhitelisted = _state;\\r\\n    }\\r\\n\\r\\n    function whitelistUsers(address[] calldata _users) public onlyOwner {\\r\\n        delete whitelistedAddresses;\\r\\n        whitelistedAddresses = _users;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal override {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        if (from == address(0)) {\\r\\n        } else if (from != to) {\\r\\n            delete _ownedTokens[tokenId] ;\\r\\n        }\\r\\n\\r\\n        if (to == address(0)) {\\r\\n        } else if (to != from) {\\r\\n            _ownedTokens[tokenId] = to;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getNFTUser (uint256 tokenId) public view returns (address) {\\r\\n        if(_ownedTokens[tokenId] == address(0)) return owner();\\r\\n        return _ownedTokens[tokenId];\\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        // This will pay operater 10% of the initial sale.\\r\\n        // You can remove this if you want, or keep it in to operater and his channel.\\r\\n        // =============================================================================\\r\\n        (bool op, ) = payable(0x9660C846fA92C99B420770d4Ae1d1b6354203354).call{\\r\\n            value: (address(this).balance * 10) / 100\\r\\n        }(\\\"\\\");\\r\\n        require(op);\\r\\n        // =============================================================================\\r\\n\\r\\n        // This will payout the owner 90% of the contract balance.\\r\\n        // Do not remove this otherwise you will not be able to withdraw the funds.\\r\\n        // =============================================================================\\r\\n        (bool os, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(os);\\r\\n        // =============================================================================\\r\\n    }\\r\\n}\\r\\n \",\"keccak256\":\"0x154fd37cdfb5d1725344916f6af357d14ef1d0ad927966942db875c77bfa3843\",\"license\":\"GPL-3.0\"},\"contracts/ChicksStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n///@consensys SWC-103\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./Chicks.sol\\\";\\r\\nimport \\\"./Egg.sol\\\";\\r\\n\\r\\ncontract ChicksStaking is Ownable {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  // ERC20 Reward Token\\r\\n  address     public _eggAddress;\\r\\n  address     public _chicksAddress;\\r\\n  Egg         _eggContract;\\r\\n  Chicks      _chicksContract;\\r\\n\\r\\n  address[]   public stakeUsers;\\r\\n  address[]   public apprUsers;\\r\\n\\r\\n  mapping(address => mapping(uint256 => uint256)) public stakerToken;\\r\\n  mapping(address => uint256[]) public stakers;\\r\\n  uint        public cycleTime = 86400; //86400\\r\\n\\r\\n  // Turn staking on/off\\r\\n  bool public allowStaking = true;\\r\\n\\r\\n  // Turn claim reward on/off\\r\\n  bool public allowClaiming= true;\\r\\n\\r\\n\\r\\n\\r\\n  // @notice event emitted when a user has staked a token\\r\\n  event Staked(address owner, uint256 amount);\\r\\n\\r\\n  // @notice event emitted when a user has unstaked a token\\r\\n  event Unstaked(address owner, uint256 amount);\\r\\n\\r\\n  // @notice event emitted when a user claims reward\\r\\n  event RewardPaid(address indexed user, uint256 reward);\\r\\n\\r\\n  modifier isAllowedClaiming() {\\r\\n    require(allowClaiming, 'Claiming is currently disabled');\\r\\n    _;\\r\\n  }\\r\\n  modifier isAllowedStaking() {\\r\\n    require(allowStaking, 'Staking is currently disabled');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(address _chicksAddress, address _eggAddress) {\\r\\n    setEggContract(_eggAddress);\\r\\n    setChicksContract(_chicksAddress);    \\r\\n  }\\r\\n\\r\\n\\r\\n  function toggleAllowStaking() external onlyOwner {\\r\\n    allowStaking = !allowStaking;\\r\\n  }\\r\\n\\r\\n  function toggleAllowClaiming() external onlyOwner {\\r\\n    allowClaiming = !allowClaiming;\\r\\n  }\\r\\n\\r\\n\\r\\n  function setEggContract(address eggAddress) public onlyOwner{\\r\\n    _eggAddress = eggAddress; \\r\\n    _eggContract =  Egg(_eggAddress);\\r\\n  }\\r\\n\\r\\n  function setChicksContract(address chicksAddress) public onlyOwner{\\r\\n    _chicksAddress = chicksAddress;\\r\\n    _chicksContract = Chicks(chicksAddress);\\r\\n  }\\r\\n\\r\\n  /// @notice Stake NFTs and earn reward tokens.\\r\\n  function stakeArray(\\r\\n    uint256[] calldata _tokenIds\\r\\n  ) external isAllowedStaking {\\r\\n    \\r\\n\\r\\n    for(uint i =0; i < _tokenIds.length; i++){\\r\\n    require(_chicksContract.getNFTUser(_tokenIds[i]) == msg.sender || msg.sender == owner(), \\\"Sender is not owner of current NFT token\\\");\\r\\n      _stake(msg.sender, _tokenIds[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function stake(\\r\\n    uint256 _tokenId\\r\\n  ) external isAllowedStaking {\\r\\n    \\r\\n    require(_chicksContract.getNFTUser(_tokenId) == msg.sender || msg.sender == owner(), \\\"Sender is not owner of current NFT token\\\");\\r\\n    _stake(msg.sender, _tokenId);\\r\\n  }\\r\\n\\r\\n\\r\\n  function addStakeUsers(address user) internal{\\r\\n    bool isIn = false;\\r\\n    for(uint i =0; i< stakeUsers.length; i++){\\r\\n      if(stakeUsers[i] == user){\\r\\n        isIn = true;\\r\\n      }\\r\\n    }\\r\\n    if(!isIn) {\\r\\n      stakeUsers.push(user);\\r\\n    }\\r\\n  } \\r\\n\\r\\n  function getStakeUsers() external returns (address[] memory){\\r\\n    address[] memory users;\\r\\n    uint index = 0;\\r\\n    for(uint i =0; i< stakeUsers.length; i++){\\r\\n      if(stakers[stakeUsers[i]].length == 0){\\r\\n        delete stakeUsers[i];\\r\\n      }else{\\r\\n        users[index] = stakeUsers[i];\\r\\n        index++;\\r\\n      }\\r\\n    }\\r\\n    return users;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev All the staking goes through this function\\r\\n   */\\r\\n  function _stake(\\r\\n    address user,\\r\\n    uint256 _tokenId\\r\\n  ) internal {\\r\\n    require (user == msg.sender ||  msg.sender == owner(), \\\"Wrong Sender\\\");\\r\\n    _chicksContract.isApprovedForAll(user, address(this));\\r\\n    _chicksContract.transferFrom(user, address(this), _tokenId);\\r\\n    addStakeUsers(user);\\r\\n    stakerToken[user][_tokenId] = block.timestamp;\\r\\n    stakers[user].push(_tokenId);\\r\\n  \\r\\n    emit Staked(user, _tokenId);\\r\\n  }\\r\\n\\r\\n\\r\\n  function unstake(address user, uint256 _tokenId) external {\\r\\n    require (user == msg.sender ||  msg.sender == owner(), \\\"Wrong Sender\\\");\\r\\n    require(stakerToken[user][_tokenId] < block.timestamp, 'Sender must have staked tokenID');\\r\\n    _claimReward(user, _tokenId);\\r\\n    _unstake(user, _tokenId);\\r\\n  }\\r\\n\\r\\n  function unstakeArray(address user, uint256[] calldata _tokenIds) external {\\r\\n    require (user == msg.sender ||  msg.sender == owner(), \\\"Wrong Sender\\\");\\r\\n    for(uint i =0; i < _tokenIds.length; i++){\\r\\n      require(stakerToken[user][_tokenIds[i]] < block.timestamp, 'Sender must have staked tokenID');\\r\\n      _claimReward(user, _tokenIds[i]);\\r\\n      _unstake(user, _tokenIds[i]);  \\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev All the unstaking goes through this function\\r\\n   * @dev Rewards to be given out is calculated\\r\\n   */\\r\\n  function _unstake(\\r\\n    address user,\\r\\n    uint256 _tokenId\\r\\n  ) internal {\\r\\n\\r\\n    delete stakerToken[user][_tokenId];\\r\\n    bool isStaked = false;\\r\\n    uint index = 0;\\r\\n    for (uint i = 0; i < stakers[user].length; i++) {\\r\\n      if(stakers[user][i] == _tokenId) {\\r\\n        index = i;\\r\\n        isStaked = true;\\r\\n      }\\r\\n    }\\r\\n    require (isStaked, \\\"Please stake nft at first \\\");\\r\\n    for (uint i = index; i<stakers[user].length-1; i++){\\r\\n            stakers[user][i] = stakers[user][i+1];\\r\\n    }\\r\\n    stakers[user].pop();\\r\\n\\r\\n    _chicksContract.transferFrom(address(this), user, _tokenId);\\r\\n    emit Unstaked(user, _tokenId);\\r\\n  }\\r\\n\\r\\n\\r\\n  function claimReward(address user, uint256 _tokenId) external {\\r\\n    require (user == msg.sender ||  msg.sender == owner(), \\\"Wrong Sender\\\");\\r\\n    _claimReward(user, _tokenId);\\r\\n  }\\r\\n\\r\\n  /// @notice Lets a user with rewards owing to claim tokens\\r\\n  function _claimReward(\\r\\n    address user,\\r\\n    uint256 tokenId\\r\\n  ) internal isAllowedClaiming {\\r\\n    uint amount = getRewardedToken(user, tokenId);\\r\\n    stakerToken[user][tokenId] = block.timestamp;\\r\\n    _eggContract.mint(user, amount);\\r\\n    emit RewardPaid(user, amount);\\r\\n  }\\r\\n\\r\\n  /// @dev Getter functions for NFTStaking contract\\r\\n  /// @dev Get the tokens staked by a user\\r\\n  function getStakedTokens(address user) external view returns (uint256[] memory tokenIds) {\\r\\n    return stakers[user];\\r\\n  }\\r\\n\\r\\n  function getRewardedToken(address user, uint256 tokenId) public view returns (uint256){\\r\\n    // require(stakerToken[user][tokenId] != 0,  'Sender must have staked NFT');\\r\\n    uint256 amount = 0;\\r\\n    if(stakerToken[user][tokenId] != 0){\\r\\n      uint256 stakedTime = stakerToken[user][tokenId];\\r\\n      uint _days = (block.timestamp - stakedTime)/cycleTime;  // /60/60/24\\r\\n      if(tokenId < 7){\\r\\n        amount = 3 * _days;\\r\\n      }else if(tokenId < 51){\\r\\n        amount = 2 * _days;\\r\\n      }else if(tokenId < 10001){\\r\\n        amount = 1 * _days;\\r\\n      }\\r\\n    }\\r\\n    return amount;\\r\\n  }\\r\\n\\r\\n  function getAllRewardedToken(address user) public view returns (uint256){\\r\\n    // require(stakers[user].length != 0,  'Sender must have staked NFT');\\r\\n    uint256 amount = 0; \\r\\n    for(uint i = 0; i < stakers[user].length; i++){\\r\\n      amount += getRewardedToken(user, stakers[user][i]);\\r\\n    }\\r\\n    return amount;\\r\\n  }\\r\\n\\r\\n  function calcRewardPerDay(address user) public view returns (uint256){\\r\\n    // require(stakers[user].length != 0,  'Sender must have staked NFT');\\r\\n    uint256 amount = 0;\\r\\n    for(uint i = 0; i < stakers[user].length; i++){\\r\\n      if(stakers[user][i] < 7){\\r\\n        amount += 3;\\r\\n      }else if(stakers[user][i] < 51){\\r\\n        amount += 2;\\r\\n      }else if(stakers[user][i] < 10001){\\r\\n        amount += 1;\\r\\n      }\\r\\n    }\\r\\n    return amount;\\r\\n  }\\r\\n\\r\\n  // Claim all the staked tokens from registered NFT contracts\\r\\n  function claimAll(address user) public {\\r\\n    require (user == msg.sender ||  msg.sender == owner(), \\\"Wrong Sender\\\");\\r\\n    require(stakers[user].length != 0,  'Sender must have staked NFT');\\r\\n    \\r\\n    for (uint256 index = 0; index < stakers[user].length; index++) {\\r\\n      _claimReward(user, stakers[user][index]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x2640aa72c55d227ab47064abe6c6195df47fb654bd55d9d10caedee04b81a47b\",\"license\":\"GPL-3.0\"},\"contracts/Egg.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n\\r\\ncontract Egg is ERC20, Ownable, Pausable {\\r\\n\\r\\n    bool public _enabled = false; \\r\\n    address public stakingContract;\\r\\n\\r\\n    address public marketingAddress;\\r\\n    address public communityAddress;\\r\\n    address public liqudityAddress;\\r\\n    uint256 public tokenAmount = 0;\\r\\n\\r\\n    uint public marketingPercent = 2;\\r\\n    uint public communityPercent = 1;\\r\\n    uint public liqudityPercent = 2;\\r\\n\\r\\n\\r\\n    mapping(address => uint256) public holder;\\r\\n    \\r\\n\\r\\n    constructor() ERC20(\\\"Egg\\\", \\\"EGG\\\") {\\r\\n        // _mint(msg.sender, 10076 * (10 ** 18));\\r\\n        marketingAddress = 0xCB6fe3235443b7Cd4EF4420165ceCBa94925EFF6;\\r\\n        communityAddress = 0x20C86CCb82AaF796041dc06aEF706cEF8e536100;\\r\\n        liqudityAddress  = address(this);\\r\\n    }\\r\\n\\r\\n    function disable() public onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n    function enable() public onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function setMarketingAddress(address _marketingAddress) public onlyOwner {\\r\\n        marketingAddress = _marketingAddress;\\r\\n    }\\r\\n\\r\\n    function setCommunityAddress(address _communityAddress) public onlyOwner {\\r\\n        communityAddress = _communityAddress;\\r\\n    }\\r\\n\\r\\n    function setLiqudityAddress(address _liqudityAddress) public onlyOwner {\\r\\n        liqudityAddress = _liqudityAddress;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setMarketingPercent(uint _marketingPercent) public onlyOwner {\\r\\n        marketingPercent = _marketingPercent;\\r\\n    }\\r\\n\\r\\n    function setCommunityPercent(uint _communityPercent) public onlyOwner {\\r\\n        communityPercent = _communityPercent;\\r\\n    }\\r\\n\\r\\n    function setLiqudityPercent(uint _liqudityPercent) public onlyOwner {\\r\\n        liqudityPercent = _liqudityPercent;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setStakingContract(address _stakingContract) public onlyOwner {\\r\\n       stakingContract = _stakingContract;\\r\\n    }\\r\\n    \\r\\n    function burn(address account, uint256 amount) public virtual onlyOwner returns (bool){\\r\\n        _burn(account,amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mint(address sender, uint256 amount) external {\\r\\n        require(msg.sender == owner() || msg.sender == stakingContract, \\\"Bad request\\\");\\r\\n        _mint(sender, amount * (10 ** 18));\\r\\n        tokenAmount += amount;\\r\\n        holder[sender] += amount;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(msg.sender, liqudityAddress,      (amount * liqudityPercent) / 100);\\r\\n        _transfer(msg.sender, marketingAddress,     (amount * marketingPercent) / 100);\\r\\n        _transfer(msg.sender, communityAddress,     (amount * communityPercent) / 100);\\r\\n        _transfer(msg.sender, recipient, (amount * (100 - liqudityPercent - marketingPercent - communityPercent)) / 100 );\\r\\n\\r\\n        holder[liqudityAddress]   += (amount * liqudityPercent) / 100;\\r\\n        holder[marketingAddress] +=  (amount * marketingPercent) / 100;\\r\\n        holder[communityAddress] +=  (amount * communityPercent) / 100;\\r\\n        holder[recipient]       +=   (amount * (100 - liqudityPercent - marketingPercent - communityPercent)) / 100;\\r\\n        \\r\\n        holder[msg.sender] -=  amount;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override  returns (bool){\\r\\n        _transfer(sender, liqudityAddress,      (amount * liqudityPercent) / 100);\\r\\n        _transfer(sender, marketingAddress,     (amount * marketingPercent) / 100);\\r\\n        _transfer(sender, communityAddress,     (amount * communityPercent) / 100);\\r\\n        _transfer(sender, recipient,            (amount * (100 - liqudityPercent - marketingPercent - communityPercent)) / 100 );\\r\\n        \\r\\n        holder[liqudityAddress]   +=(amount * liqudityPercent) / 100;\\r\\n        holder[marketingAddress] += (amount * marketingPercent) / 100;\\r\\n        holder[communityAddress] += (amount * communityPercent) / 100;\\r\\n        holder[recipient]       +=  (amount * (100 - liqudityPercent - marketingPercent - communityPercent)) / 100 ;\\r\\n        \\r\\n        holder[sender] -=  amount;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        (bool os, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(os);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc11ed36d93b5d09d4c32809ffbc339cb98176a224aedc60686ec5d55c6628b14\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405262015180600955600a805461ffff19166101011790553480156200002757600080fd5b5060405162001d6538038062001d658339810160408190526200004a91620001d2565b620000553362000073565b6200006081620000c3565b6200006b826200013e565b505062000209565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001125760405162461bcd60e51b8152602060048201819052602482015260008051602062001d4583398151915260448201526064015b60405180910390fd5b600180546001600160a01b039092166001600160a01b0319928316811790915560038054909216179055565b6000546001600160a01b03163314620001895760405162461bcd60e51b8152602060048201819052602482015260008051602062001d45833981519152604482015260640162000109565b600280546001600160a01b039092166001600160a01b0319928316811790915560048054909216179055565b80516001600160a01b0381168114620001cd57600080fd5b919050565b60008060408385031215620001e5578182fd5b620001f083620001b5565b91506200020060208401620001b5565b90509250929050565b611b2c80620002196000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80638da5cb5b116100f9578063d708e2c111610097578063e62f981411610071578063e62f9814146103a4578063e8a63682146103b1578063eb0cb0c3146103c4578063f2fde38b146103cc57600080fd5b8063d708e2c114610366578063de7333971461036f578063dfb2a5411461039157600080fd5b8063a694fc3a116100d3578063a694fc3a14610325578063c2a672e014610338578063c8b6cbf71461034b578063c9dd39a21461035e57600080fd5b80638da5cb5b146102ee578063901af3e9146102ff5780639d906a851461031257600080fd5b8063625caad11161016657806377329f351161014057806377329f35146102885780637c4ef1bd1461029b57806383bcaa1e146102c657806386211933146102d957600080fd5b8063625caad11461024d57806363c28db114610260578063715018a61461028057600080fd5b806305c1ad29146101ae578063174e31c4146101d457806318777867146101e95780631fbea948146101fc57806322e05b5c1461020f5780634211fc1d1461023a575b600080fd5b6101c16101bc3660046117ec565b6103df565b6040519081526020015b60405180910390f35b6101e76101e2366004611877565b610477565b005b6101c16101f73660046117ec565b6104cb565b6101e761020a3660046117ec565b610615565b600254610222906001600160a01b031681565b6040516001600160a01b0390911681526020016101cb565b6101e7610248366004611824565b61066b565b61022261025b366004611902565b6107c8565b61027361026e3660046117ec565b6107f2565b6040516101cb9190611967565b6101e761085e565b6101e76102963660046117ec565b610894565b6101c16102a9366004611877565b600760209081526000928352604080842090915290825290205481565b6102226102d4366004611902565b6109b9565b6102e16109c9565b6040516101cb919061191a565b6000546001600160a01b0316610222565b6101e761030d3660046117ec565b610b06565b6101c1610320366004611877565b610b5c565b6101e7610333366004611902565b610c18565b6101e7610346366004611877565b610d30565b6101c1610359366004611877565b610df3565b6101e7610e24565b6101c160095481565b600a5461038190610100900460ff1681565b60405190151581526020016101cb565b600154610222906001600160a01b031681565b600a546103819060ff1681565b6101e76103bf3660046118a2565b610e62565b6101e7610fe9565b6101e76103da3660046117ec565b611030565b600080805b6001600160a01b038416600090815260086020526040902054811015610470576001600160a01b038416600090815260086020526040902080546104529186918490811061044257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154610b5c565b61045c9083611a42565b91508061046881611ab0565b9150506103e4565b5092915050565b6001600160a01b03821633148061049857506000546001600160a01b031633145b6104bd5760405162461bcd60e51b81526004016104b4906119e7565b60405180910390fd5b6104c782826110c8565b5050565b600080805b6001600160a01b038416600090815260086020526040902054811015610470576001600160a01b03841660009081526008602052604090208054600791908390811061052c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154101561054f57610548600383611a42565b9150610603565b6001600160a01b03841660009081526008602052604090208054603391908390811061058b57634e487b7160e01b600052603260045260246000fd5b906000526020600020015410156105a757610548600283611a42565b6001600160a01b038416600090815260086020526040902080546127119190839081106105e457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154101561060357610600600183611a42565b91505b8061060d81611ab0565b9150506104d0565b6000546001600160a01b0316331461063f5760405162461bcd60e51b81526004016104b490611a0d565b600180546001600160a01b039092166001600160a01b0319928316811790915560038054909216179055565b6001600160a01b03831633148061068c57506000546001600160a01b031633145b6106a85760405162461bcd60e51b81526004016104b4906119e7565b60005b818110156107c2576001600160a01b038416600090815260076020526040812042918585858181106106ed57634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002054106107505760405162461bcd60e51b815260206004820152601f60248201527f53656e646572206d7573742068617665207374616b656420746f6b656e49440060448201526064016104b4565b6107808484848481811061077457634e487b7160e01b600052603260045260246000fd5b905060200201356110c8565b6107b0848484848181106107a457634e487b7160e01b600052603260045260246000fd5b905060200201356111fb565b806107ba81611ab0565b9150506106ab565b50505050565b600681815481106107d857600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03811660009081526008602090815260409182902080548351818402810184019094528084526060939283018282801561085257602002820191906000526020600020905b81548152602001906001019080831161083e575b50505050509050919050565b6000546001600160a01b031633146108885760405162461bcd60e51b81526004016104b490611a0d565b61089260006114d8565b565b6001600160a01b0381163314806108b557506000546001600160a01b031633145b6108d15760405162461bcd60e51b81526004016104b4906119e7565b6001600160a01b0381166000908152600860205260409020546109365760405162461bcd60e51b815260206004820152601b60248201527f53656e646572206d7573742068617665207374616b6564204e4654000000000060448201526064016104b4565b60005b6001600160a01b0382166000908152600860205260409020548110156104c7576001600160a01b038216600090815260086020526040902080546109a79184918490811061099757634e487b7160e01b600052603260045260246000fd5b90600052602060002001546110c8565b806109b181611ab0565b915050610939565b600581815481106107d857600080fd5b6060806000805b600554811015610afe5760086000600583815481106109ff57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902054610a675760058181548110610a4957634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b0319169055610aec565b60058181548110610a8857634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316838381518110610ac657634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015281610ae881611ab0565b9250505b80610af681611ab0565b9150506109d0565b509092915050565b6000546001600160a01b03163314610b305760405162461bcd60e51b81526004016104b490611a0d565b600280546001600160a01b039092166001600160a01b0319928316811790915560048054909216179055565b6001600160a01b0382166000908152600760209081526040808320848452909152812054819015610c11576001600160a01b0384166000908152600760209081526040808320868452909152812054600954909190610bbb8342611a99565b610bc59190611a5a565b90506007851015610be257610bdb816003611a7a565b9250610c0e565b6033851015610bf657610bdb816002611a7a565b612711851015610c0e57610c0b816001611a7a565b92505b50505b9392505050565b600a5460ff16610c6a5760405162461bcd60e51b815260206004820152601d60248201527f5374616b696e672069732063757272656e746c792064697361626c656400000060448201526064016104b4565b60048054604051630914a87160e41b815291820183905233916001600160a01b039091169063914a87109060240160206040518083038186803b158015610cb057600080fd5b505afa158015610cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce89190611808565b6001600160a01b03161480610d0757506000546001600160a01b031633145b610d235760405162461bcd60e51b81526004016104b49061199f565b610d2d3382611528565b50565b6001600160a01b038216331480610d5157506000546001600160a01b031633145b610d6d5760405162461bcd60e51b81526004016104b4906119e7565b6001600160a01b03821660009081526007602090815260408083208484529091529020544211610ddf5760405162461bcd60e51b815260206004820152601f60248201527f53656e646572206d7573742068617665207374616b656420746f6b656e49440060448201526064016104b4565b610de982826110c8565b6104c782826111fb565b60086020528160005260406000208181548110610e0f57600080fd5b90600052602060002001600091509150505481565b6000546001600160a01b03163314610e4e5760405162461bcd60e51b81526004016104b490611a0d565b600a805460ff19811660ff90911615179055565b600a5460ff16610eb45760405162461bcd60e51b815260206004820152601d60248201527f5374616b696e672069732063757272656e746c792064697361626c656400000060448201526064016104b4565b60005b81811015610fe45760045433906001600160a01b031663914a8710858585818110610ef257634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401610f1791815260200190565b60206040518083038186803b158015610f2f57600080fd5b505afa158015610f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f679190611808565b6001600160a01b03161480610f8657506000546001600160a01b031633145b610fa25760405162461bcd60e51b81526004016104b49061199f565b610fd233848484818110610fc657634e487b7160e01b600052603260045260246000fd5b90506020020135611528565b80610fdc81611ab0565b915050610eb7565b505050565b6000546001600160a01b031633146110135760405162461bcd60e51b81526004016104b490611a0d565b600a805461ff001981166101009182900460ff1615909102179055565b6000546001600160a01b0316331461105a5760405162461bcd60e51b81526004016104b490611a0d565b6001600160a01b0381166110bf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b4565b610d2d816114d8565b600a54610100900460ff1661111f5760405162461bcd60e51b815260206004820152601e60248201527f436c61696d696e672069732063757272656e746c792064697361626c6564000060448201526064016104b4565b600061112b8383610b5c565b6001600160a01b0384811660008181526007602090815260408083208884529091529081902042905560035490516340c10f1960e01b81526004810192909252602482018490529293509116906340c10f1990604401600060405180830381600087803b15801561119b57600080fd5b505af11580156111af573d6000803e3d6000fd5b50505050826001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040516111ee91815260200190565b60405180910390a2505050565b6001600160a01b0382166000908152600760209081526040808320848452909152812081905580805b6001600160a01b0385166000908152600860205260409020548110156112aa576001600160a01b038516600090815260086020526040902080548591908390811061127f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154141561129857809150600192505b806112a281611ab0565b915050611224565b50816112f85760405162461bcd60e51b815260206004820152601a60248201527f506c65617365207374616b65206e66742061742066697273742000000000000060448201526064016104b4565b805b6001600160a01b03851660009081526008602052604090205461131f90600190611a99565b8110156113d4576001600160a01b0385166000908152600860205260409020611349826001611a42565b8154811061136757634e487b7160e01b600052603260045260246000fd5b906000526020600020015460086000876001600160a01b03166001600160a01b0316815260200190815260200160002082815481106113b657634e487b7160e01b600052603260045260246000fd5b600091825260209091200155806113cc81611ab0565b9150506112fa565b506001600160a01b038416600090815260086020526040902080548061140a57634e487b7160e01b600052603160045260246000fd5b600082815260208120600019908301810191909155019055600480546040516323b872dd60e01b815230928101929092526001600160a01b0386811660248401526044830186905216906323b872dd90606401600060405180830381600087803b15801561147757600080fd5b505af115801561148b573d6000803e3d6000fd5b5050604080516001600160a01b0388168152602081018790527f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75935001905060405180910390a150505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03821633148061154957506000546001600160a01b031633145b6115655760405162461bcd60e51b81526004016104b4906119e7565b6004805460405163e985e9c560e01b81526001600160a01b038581169382019390935230602482015291169063e985e9c59060440160206040518083038186803b1580156115b257600080fd5b505afa1580156115c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ea91906118e2565b50600480546040516323b872dd60e01b81526001600160a01b0385811693820193909352306024820152604481018490529116906323b872dd90606401600060405180830381600087803b15801561164157600080fd5b505af1158015611655573d6000803e3d6000fd5b50505050611662826116e0565b6001600160a01b0382166000818152600760209081526040808320858452825280832042905583835260088252808320805460018101825590845292829020909201849055815192835282018390527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d910160405180910390a15050565b6000805b60055481101561174b57826001600160a01b03166005828154811061171957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316141561173957600191505b8061174381611ab0565b9150506116e4565b50806104c757600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0384166001600160a01b03199091161790555050565b60008083601f8401126117b3578182fd5b50813567ffffffffffffffff8111156117ca578182fd5b6020830191508360208260051b85010111156117e557600080fd5b9250929050565b6000602082840312156117fd578081fd5b8135610c1181611ae1565b600060208284031215611819578081fd5b8151610c1181611ae1565b600080600060408486031215611838578182fd5b833561184381611ae1565b9250602084013567ffffffffffffffff81111561185e578283fd5b61186a868287016117a2565b9497909650939450505050565b60008060408385031215611889578182fd5b823561189481611ae1565b946020939093013593505050565b600080602083850312156118b4578182fd5b823567ffffffffffffffff8111156118ca578283fd5b6118d6858286016117a2565b90969095509350505050565b6000602082840312156118f3578081fd5b81518015158114610c11578182fd5b600060208284031215611913578081fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561195b5783516001600160a01b031683529284019291840191600101611936565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561195b57835183529284019291840191600101611983565b60208082526028908201527f53656e646572206973206e6f74206f776e6572206f662063757272656e74204e604082015267232a103a37b5b2b760c11b606082015260800190565b6020808252600c908201526b2bb937b7339029b2b73232b960a11b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611a5557611a55611acb565b500190565b600082611a7557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611a9457611a94611acb565b500290565b600082821015611aab57611aab611acb565b500390565b6000600019821415611ac457611ac4611acb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610d2d57600080fdfea2646970667358221220f4464b01a4e65364c583d504822281172e3c944f44df9f3f719f3487211a983d64736f6c634300080400334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80638da5cb5b116100f9578063d708e2c111610097578063e62f981411610071578063e62f9814146103a4578063e8a63682146103b1578063eb0cb0c3146103c4578063f2fde38b146103cc57600080fd5b8063d708e2c114610366578063de7333971461036f578063dfb2a5411461039157600080fd5b8063a694fc3a116100d3578063a694fc3a14610325578063c2a672e014610338578063c8b6cbf71461034b578063c9dd39a21461035e57600080fd5b80638da5cb5b146102ee578063901af3e9146102ff5780639d906a851461031257600080fd5b8063625caad11161016657806377329f351161014057806377329f35146102885780637c4ef1bd1461029b57806383bcaa1e146102c657806386211933146102d957600080fd5b8063625caad11461024d57806363c28db114610260578063715018a61461028057600080fd5b806305c1ad29146101ae578063174e31c4146101d457806318777867146101e95780631fbea948146101fc57806322e05b5c1461020f5780634211fc1d1461023a575b600080fd5b6101c16101bc3660046117ec565b6103df565b6040519081526020015b60405180910390f35b6101e76101e2366004611877565b610477565b005b6101c16101f73660046117ec565b6104cb565b6101e761020a3660046117ec565b610615565b600254610222906001600160a01b031681565b6040516001600160a01b0390911681526020016101cb565b6101e7610248366004611824565b61066b565b61022261025b366004611902565b6107c8565b61027361026e3660046117ec565b6107f2565b6040516101cb9190611967565b6101e761085e565b6101e76102963660046117ec565b610894565b6101c16102a9366004611877565b600760209081526000928352604080842090915290825290205481565b6102226102d4366004611902565b6109b9565b6102e16109c9565b6040516101cb919061191a565b6000546001600160a01b0316610222565b6101e761030d3660046117ec565b610b06565b6101c1610320366004611877565b610b5c565b6101e7610333366004611902565b610c18565b6101e7610346366004611877565b610d30565b6101c1610359366004611877565b610df3565b6101e7610e24565b6101c160095481565b600a5461038190610100900460ff1681565b60405190151581526020016101cb565b600154610222906001600160a01b031681565b600a546103819060ff1681565b6101e76103bf3660046118a2565b610e62565b6101e7610fe9565b6101e76103da3660046117ec565b611030565b600080805b6001600160a01b038416600090815260086020526040902054811015610470576001600160a01b038416600090815260086020526040902080546104529186918490811061044257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154610b5c565b61045c9083611a42565b91508061046881611ab0565b9150506103e4565b5092915050565b6001600160a01b03821633148061049857506000546001600160a01b031633145b6104bd5760405162461bcd60e51b81526004016104b4906119e7565b60405180910390fd5b6104c782826110c8565b5050565b600080805b6001600160a01b038416600090815260086020526040902054811015610470576001600160a01b03841660009081526008602052604090208054600791908390811061052c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154101561054f57610548600383611a42565b9150610603565b6001600160a01b03841660009081526008602052604090208054603391908390811061058b57634e487b7160e01b600052603260045260246000fd5b906000526020600020015410156105a757610548600283611a42565b6001600160a01b038416600090815260086020526040902080546127119190839081106105e457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154101561060357610600600183611a42565b91505b8061060d81611ab0565b9150506104d0565b6000546001600160a01b0316331461063f5760405162461bcd60e51b81526004016104b490611a0d565b600180546001600160a01b039092166001600160a01b0319928316811790915560038054909216179055565b6001600160a01b03831633148061068c57506000546001600160a01b031633145b6106a85760405162461bcd60e51b81526004016104b4906119e7565b60005b818110156107c2576001600160a01b038416600090815260076020526040812042918585858181106106ed57634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002054106107505760405162461bcd60e51b815260206004820152601f60248201527f53656e646572206d7573742068617665207374616b656420746f6b656e49440060448201526064016104b4565b6107808484848481811061077457634e487b7160e01b600052603260045260246000fd5b905060200201356110c8565b6107b0848484848181106107a457634e487b7160e01b600052603260045260246000fd5b905060200201356111fb565b806107ba81611ab0565b9150506106ab565b50505050565b600681815481106107d857600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03811660009081526008602090815260409182902080548351818402810184019094528084526060939283018282801561085257602002820191906000526020600020905b81548152602001906001019080831161083e575b50505050509050919050565b6000546001600160a01b031633146108885760405162461bcd60e51b81526004016104b490611a0d565b61089260006114d8565b565b6001600160a01b0381163314806108b557506000546001600160a01b031633145b6108d15760405162461bcd60e51b81526004016104b4906119e7565b6001600160a01b0381166000908152600860205260409020546109365760405162461bcd60e51b815260206004820152601b60248201527f53656e646572206d7573742068617665207374616b6564204e4654000000000060448201526064016104b4565b60005b6001600160a01b0382166000908152600860205260409020548110156104c7576001600160a01b038216600090815260086020526040902080546109a79184918490811061099757634e487b7160e01b600052603260045260246000fd5b90600052602060002001546110c8565b806109b181611ab0565b915050610939565b600581815481106107d857600080fd5b6060806000805b600554811015610afe5760086000600583815481106109ff57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902054610a675760058181548110610a4957634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b0319169055610aec565b60058181548110610a8857634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316838381518110610ac657634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015281610ae881611ab0565b9250505b80610af681611ab0565b9150506109d0565b509092915050565b6000546001600160a01b03163314610b305760405162461bcd60e51b81526004016104b490611a0d565b600280546001600160a01b039092166001600160a01b0319928316811790915560048054909216179055565b6001600160a01b0382166000908152600760209081526040808320848452909152812054819015610c11576001600160a01b0384166000908152600760209081526040808320868452909152812054600954909190610bbb8342611a99565b610bc59190611a5a565b90506007851015610be257610bdb816003611a7a565b9250610c0e565b6033851015610bf657610bdb816002611a7a565b612711851015610c0e57610c0b816001611a7a565b92505b50505b9392505050565b600a5460ff16610c6a5760405162461bcd60e51b815260206004820152601d60248201527f5374616b696e672069732063757272656e746c792064697361626c656400000060448201526064016104b4565b60048054604051630914a87160e41b815291820183905233916001600160a01b039091169063914a87109060240160206040518083038186803b158015610cb057600080fd5b505afa158015610cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce89190611808565b6001600160a01b03161480610d0757506000546001600160a01b031633145b610d235760405162461bcd60e51b81526004016104b49061199f565b610d2d3382611528565b50565b6001600160a01b038216331480610d5157506000546001600160a01b031633145b610d6d5760405162461bcd60e51b81526004016104b4906119e7565b6001600160a01b03821660009081526007602090815260408083208484529091529020544211610ddf5760405162461bcd60e51b815260206004820152601f60248201527f53656e646572206d7573742068617665207374616b656420746f6b656e49440060448201526064016104b4565b610de982826110c8565b6104c782826111fb565b60086020528160005260406000208181548110610e0f57600080fd5b90600052602060002001600091509150505481565b6000546001600160a01b03163314610e4e5760405162461bcd60e51b81526004016104b490611a0d565b600a805460ff19811660ff90911615179055565b600a5460ff16610eb45760405162461bcd60e51b815260206004820152601d60248201527f5374616b696e672069732063757272656e746c792064697361626c656400000060448201526064016104b4565b60005b81811015610fe45760045433906001600160a01b031663914a8710858585818110610ef257634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401610f1791815260200190565b60206040518083038186803b158015610f2f57600080fd5b505afa158015610f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f679190611808565b6001600160a01b03161480610f8657506000546001600160a01b031633145b610fa25760405162461bcd60e51b81526004016104b49061199f565b610fd233848484818110610fc657634e487b7160e01b600052603260045260246000fd5b90506020020135611528565b80610fdc81611ab0565b915050610eb7565b505050565b6000546001600160a01b031633146110135760405162461bcd60e51b81526004016104b490611a0d565b600a805461ff001981166101009182900460ff1615909102179055565b6000546001600160a01b0316331461105a5760405162461bcd60e51b81526004016104b490611a0d565b6001600160a01b0381166110bf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b4565b610d2d816114d8565b600a54610100900460ff1661111f5760405162461bcd60e51b815260206004820152601e60248201527f436c61696d696e672069732063757272656e746c792064697361626c6564000060448201526064016104b4565b600061112b8383610b5c565b6001600160a01b0384811660008181526007602090815260408083208884529091529081902042905560035490516340c10f1960e01b81526004810192909252602482018490529293509116906340c10f1990604401600060405180830381600087803b15801561119b57600080fd5b505af11580156111af573d6000803e3d6000fd5b50505050826001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040516111ee91815260200190565b60405180910390a2505050565b6001600160a01b0382166000908152600760209081526040808320848452909152812081905580805b6001600160a01b0385166000908152600860205260409020548110156112aa576001600160a01b038516600090815260086020526040902080548591908390811061127f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154141561129857809150600192505b806112a281611ab0565b915050611224565b50816112f85760405162461bcd60e51b815260206004820152601a60248201527f506c65617365207374616b65206e66742061742066697273742000000000000060448201526064016104b4565b805b6001600160a01b03851660009081526008602052604090205461131f90600190611a99565b8110156113d4576001600160a01b0385166000908152600860205260409020611349826001611a42565b8154811061136757634e487b7160e01b600052603260045260246000fd5b906000526020600020015460086000876001600160a01b03166001600160a01b0316815260200190815260200160002082815481106113b657634e487b7160e01b600052603260045260246000fd5b600091825260209091200155806113cc81611ab0565b9150506112fa565b506001600160a01b038416600090815260086020526040902080548061140a57634e487b7160e01b600052603160045260246000fd5b600082815260208120600019908301810191909155019055600480546040516323b872dd60e01b815230928101929092526001600160a01b0386811660248401526044830186905216906323b872dd90606401600060405180830381600087803b15801561147757600080fd5b505af115801561148b573d6000803e3d6000fd5b5050604080516001600160a01b0388168152602081018790527f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75935001905060405180910390a150505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03821633148061154957506000546001600160a01b031633145b6115655760405162461bcd60e51b81526004016104b4906119e7565b6004805460405163e985e9c560e01b81526001600160a01b038581169382019390935230602482015291169063e985e9c59060440160206040518083038186803b1580156115b257600080fd5b505afa1580156115c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ea91906118e2565b50600480546040516323b872dd60e01b81526001600160a01b0385811693820193909352306024820152604481018490529116906323b872dd90606401600060405180830381600087803b15801561164157600080fd5b505af1158015611655573d6000803e3d6000fd5b50505050611662826116e0565b6001600160a01b0382166000818152600760209081526040808320858452825280832042905583835260088252808320805460018101825590845292829020909201849055815192835282018390527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d910160405180910390a15050565b6000805b60055481101561174b57826001600160a01b03166005828154811061171957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316141561173957600191505b8061174381611ab0565b9150506116e4565b50806104c757600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0384166001600160a01b03199091161790555050565b60008083601f8401126117b3578182fd5b50813567ffffffffffffffff8111156117ca578182fd5b6020830191508360208260051b85010111156117e557600080fd5b9250929050565b6000602082840312156117fd578081fd5b8135610c1181611ae1565b600060208284031215611819578081fd5b8151610c1181611ae1565b600080600060408486031215611838578182fd5b833561184381611ae1565b9250602084013567ffffffffffffffff81111561185e578283fd5b61186a868287016117a2565b9497909650939450505050565b60008060408385031215611889578182fd5b823561189481611ae1565b946020939093013593505050565b600080602083850312156118b4578182fd5b823567ffffffffffffffff8111156118ca578283fd5b6118d6858286016117a2565b90969095509350505050565b6000602082840312156118f3578081fd5b81518015158114610c11578182fd5b600060208284031215611913578081fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561195b5783516001600160a01b031683529284019291840191600101611936565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561195b57835183529284019291840191600101611983565b60208082526028908201527f53656e646572206973206e6f74206f776e6572206f662063757272656e74204e604082015267232a103a37b5b2b760c11b606082015260800190565b6020808252600c908201526b2bb937b7339029b2b73232b960a11b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611a5557611a55611acb565b500190565b600082611a7557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611a9457611a94611acb565b500290565b600082821015611aab57611aab611acb565b500390565b6000600019821415611ac457611ac4611acb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610d2d57600080fdfea2646970667358221220f4464b01a4e65364c583d504822281172e3c944f44df9f3f719f3487211a983d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getStakedTokens(address)": {
        "details": "Getter functions for NFTStaking contractGet the tokens staked by a user"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "stakeArray(uint256[])": {
        "notice": "Stake NFTs and earn reward tokens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ChicksStaking.sol:ChicksStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3893,
        "contract": "contracts/ChicksStaking.sol:ChicksStaking",
        "label": "_eggAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3895,
        "contract": "contracts/ChicksStaking.sol:ChicksStaking",
        "label": "_chicksAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3898,
        "contract": "contracts/ChicksStaking.sol:ChicksStaking",
        "label": "_eggContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Egg)5332"
      },
      {
        "astId": 3901,
        "contract": "contracts/ChicksStaking.sol:ChicksStaking",
        "label": "_chicksContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(Chicks)3879"
      },
      {
        "astId": 3904,
        "contract": "contracts/ChicksStaking.sol:ChicksStaking",
        "label": "stakeUsers",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3907,
        "contract": "contracts/ChicksStaking.sol:ChicksStaking",
        "label": "apprUsers",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3913,
        "contract": "contracts/ChicksStaking.sol:ChicksStaking",
        "label": "stakerToken",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3918,
        "contract": "contracts/ChicksStaking.sol:ChicksStaking",
        "label": "stakers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3921,
        "contract": "contracts/ChicksStaking.sol:ChicksStaking",
        "label": "cycleTime",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3924,
        "contract": "contracts/ChicksStaking.sol:ChicksStaking",
        "label": "allowStaking",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 3927,
        "contract": "contracts/ChicksStaking.sol:ChicksStaking",
        "label": "allowClaiming",
        "offset": 1,
        "slot": "10",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Chicks)3879": {
        "encoding": "inplace",
        "label": "contract Chicks",
        "numberOfBytes": "20"
      },
      "t_contract(Egg)5332": {
        "encoding": "inplace",
        "label": "contract Egg",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}