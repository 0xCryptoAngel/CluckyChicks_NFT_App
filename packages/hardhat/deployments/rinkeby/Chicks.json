{
  "address": "0xd80A5574dC8841A67837eadBe1c5e301c9eb8377",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ownedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressMintedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNFTUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainCollections",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainNFTforUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaDataFolder",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftPerAddressLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notRevealedUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onlyWhitelisted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseExtension",
          "type": "string"
        }
      ],
      "name": "setBaseExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCost",
          "type": "uint256"
        }
      ],
      "name": "setCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "setNftPerAddressLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_notRevealedURI",
          "type": "string"
        }
      ],
      "name": "setNotRevealedURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_state",
          "type": "uint256"
        }
      ],
      "name": "setOnlyWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_rareURI",
          "type": "string"
        }
      ],
      "name": "setRareTokenURL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "remainNFT",
          "type": "uint256"
        }
      ],
      "name": "setRemainCollections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newmaxMintAmount",
          "type": "uint256"
        }
      ],
      "name": "setmaxMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        }
      ],
      "name": "whitelistUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelistedAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f4d46e487c055535919af58f7c52f92ae239103a2e82bd70e944522cc213d63",
  "receipt": {
    "to": null,
    "from": "0xf5aF44B2e01445cD2093CE254CD95b80354fCC97",
    "contractAddress": "0xd80A5574dC8841A67837eadBe1c5e301c9eb8377",
    "transactionIndex": 66,
    "gasUsed": "3057189",
    "logsBloom": "0x
    "blockHash": "0xf3ee494c112e7baee391a2214d27b24ac7d1bf4b1bfef25e0613b4ed7b7de11f",
    "transactionHash": "0x6f4d46e487c055535919af58f7c52f92ae239103a2e82bd70e944522cc213d63",
    "logs": [
      {
        "transactionIndex": 66,
        "blockNumber": 10457666,
        "transactionHash": "0x6f4d46e487c055535919af58f7c52f92ae239103a2e82bd70e944522cc213d63",
        "address": "0xd80A5574dC8841A67837eadBe1c5e301c9eb8377",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5af44b2e01445cd2093ce254cd95b80354fcc97"
        ],
        "data": "0x",
        "logIndex": 94,
        "blockHash": "0xf3ee494c112e7baee391a2214d27b24ac7d1bf4b1bfef25e0613b4ed7b7de11f"
      }
    ],
    "blockNumber": 10457666,
    "cumulativeGasUsed": "20562002",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CluckyChicks",
    "Clucky Chicks",
    "https://cluckychicks.mypinata.cloud/ipfs/QmcZYkrszjk5SymvRTfeYPBfkTLRu518chtJBLykA7e9Zc/"
  ],
  "numDeployments": 8,
  "solcInputHash": "fb0cd9b8ea48e1853064605b4399ef53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ownedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressMintedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainCollections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainNFTforUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaDataFolder\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPerAddressLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notRevealedUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyWhitelisted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setNftPerAddressLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_notRevealedURI\",\"type\":\"string\"}],\"name\":\"setNotRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"setOnlyWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_rareURI\",\"type\":\"string\"}],\"name\":\"setRareTokenURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remainNFT\",\"type\":\"uint256\"}],\"name\":\"setRemainCollections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setmaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Chicks.sol\":\"Chicks\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Chicks.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n///@consensys SWC-103\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract Chicks is ERC721Enumerable, Ownable {\\r\\n    //For nft staking.\\r\\n    mapping(uint256 => address) public _ownedTokens;\\r\\n\\r\\n    // Optional mapping for token URIs  \\r\\n    mapping (uint256 => string) private _tokenURIs;\\r\\n    string private baseURI;\\r\\n    string public baseExtension     = \\\".json\\\";\\r\\n    string public metaDataFolder    = \\\"\\\";\\r\\n    string public notRevealedUri    =  \\\"\\\";\\r\\n    string public _name;\\r\\n    string public _symbol;\\r\\n\\r\\n    uint256 public cost             =   0.0499 ether;    \\r\\n    uint256 public maxSupply        =   10000;\\r\\n    uint256 public remainTokenAmount=   10000;\\r\\n    uint256 public maxMintAmount    =   100;   \\r\\n    uint256 public nftPerAddressLimit=  100;\\r\\n    uint256 public onlyWhitelisted     = 0;\\r\\n    uint256 public revealed            = 1;\\r\\n    uint256 public paused              = 0;\\r\\n\\r\\n    address[] public whitelistedAddresses;\\r\\n    mapping(address => uint256) public addressMintedBalance;\\r\\n    \\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        string memory _initBaseURI\\r\\n    ) ERC721(_name, _symbol) {\\r\\n        setBaseURI(_initBaseURI);\\r\\n    }\\r\\n\\r\\n    // internal\\r\\n    // convenience function to return the baseURI\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    // public\\r\\n    function mint(address _to, uint256 _mintAmount) public payable {\\r\\n        uint256 supply = totalSupply();\\r\\n        require(paused == 0, \\\"Mint is paused\\\");\\r\\n        require(msg.sender != address(0x0), \\\"Recipient should be present\\\");\\r\\n        require(_mintAmount > 0, \\\"Need to mint at least 1 NFT\\\");\\r\\n        require(remainTokenAmount > 0, \\\"Max NFT limit exceeded\\\");\\r\\n\\r\\n        if (msg.sender != owner()) {\\r\\n            if (onlyWhitelisted == 1) {\\r\\n                require(isWhitelisted(msg.sender), \\\"User is not whitelisted\\\");\\r\\n                uint256 ownerMintedCount = addressMintedBalance[msg.sender];\\r\\n                require(\\r\\n                    ownerMintedCount + _mintAmount <= nftPerAddressLimit,\\r\\n                    \\\"Max NFT per address exceeded\\\"\\r\\n                );\\r\\n            }\\r\\n            //if owner change cost then frontend must be changed\\r\\n            require(msg.value != 0, \\\"Royalty value should be positive\\\" );\\r\\n            require(msg.value >= cost * _mintAmount, \\\"Insufficient funds\\\");\\r\\n            require(_mintAmount <= maxMintAmount, \\\"Max mint amount per session exceeded\\\");\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 1; i <= _mintAmount; i++) {\\r\\n            _safeMint(_to, supply + i);\\r\\n            addressMintedBalance[msg.sender]++;\\r\\n            remainTokenAmount--;\\r\\n        }\\r\\n        if(remainTokenAmount % 1000 == 0){\\r\\n            paused = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isWhitelisted(address _user) public view returns (bool) {\\r\\n        for (uint256 i = 0; i < whitelistedAddresses.length; i++) {\\r\\n            if (whitelistedAddresses[i] == _user) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    // return all NFTs for a particular owner\\r\\n    function walletOfOwner(address _owner)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 ownerTokenCount = balanceOf(_owner);\\r\\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\r\\n        for (uint256 i; i < ownerTokenCount; i++) {\\r\\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\r\\n        }\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        string memory base = _baseURI();\\r\\n\\r\\n        if(revealed == 0) return notRevealedUri;\\r\\n    \\r\\n        // If there is no base URI, return the token URI.\\r\\n        if (bytes(base).length == 0) {\\r\\n            return _tokenURI;\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n        if (bytes(_tokenURI).length > 0) {\\r\\n            return string(abi.encodePacked(base, _tokenURI, baseExtension));\\r\\n        }\\r\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\r\\n        return string(abi.encodePacked(base, Strings.toString(tokenId), baseExtension));\\r\\n    }\\r\\n\\r\\n\\r\\n    //to be seen how many collections are minted and remained in frontend \\r\\n    function setRareTokenURL(uint256 tokenId, string memory _rareURI)  public onlyOwner {\\r\\n        _tokenURIs[tokenId] = _rareURI;\\r\\n    }\\r\\n\\r\\n    //to be seen how many collections are minted and remained in frontend \\r\\n    function getRemainCollections() public view returns (uint256) {\\r\\n        return remainTokenAmount;\\r\\n    }\\r\\n\\r\\n    function setRemainCollections(uint256 remainNFT) public onlyOwner{\\r\\n        remainTokenAmount = remainNFT;\\r\\n    }\\r\\n    //to be seen how many nfts user minted and can mint\\r\\n    function getRemainNFTforUser() public view returns (uint256) {\\r\\n        uint256 amount;\\r\\n        if (msg.sender != owner()) {\\r\\n            amount = nftPerAddressLimit - addressMintedBalance[msg.sender];\\r\\n        }else {\\r\\n            amount = 200;\\r\\n        }\\r\\n        return amount;\\r\\n    }       \\r\\n\\r\\n    //only owner\\r\\n    function reveal() public onlyOwner {\\r\\n        revealed = 1;\\r\\n    }\\r\\n\\r\\n    function setNftPerAddressLimit(uint256 _limit) public onlyOwner {\\r\\n        nftPerAddressLimit = _limit;\\r\\n    }\\r\\n\\r\\n    function setCost(uint256 _newCost) public onlyOwner {\\r\\n        cost = _newCost;\\r\\n    }\\r\\n\\r\\n    function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\\r\\n        maxMintAmount = _newmaxMintAmount;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n        baseURI = _newBaseURI;\\r\\n    }\\r\\n\\r\\n    function setBaseExtension(string memory _newBaseExtension)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        baseExtension = _newBaseExtension;\\r\\n    }\\r\\n\\r\\n    function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\\r\\n        notRevealedUri = _notRevealedURI;\\r\\n    }\\r\\n\\r\\n    function pause(bool _state) public onlyOwner {\\r\\n        if(_state) paused = 1;\\r\\n        else paused = 0;\\r\\n    }\\r\\n\\r\\n    function isPaused() public view returns (uint256) {\\r\\n        return paused;\\r\\n    }\\r\\n\\r\\n    function setOnlyWhitelisted(uint256 _state) public onlyOwner {\\r\\n        onlyWhitelisted = _state;\\r\\n    }\\r\\n\\r\\n    function whitelistUsers(address[] calldata _users) public onlyOwner {\\r\\n        delete whitelistedAddresses;\\r\\n        whitelistedAddresses = _users;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal override {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        if (from == address(0)) {\\r\\n        } else if (from != to) {\\r\\n            delete _ownedTokens[tokenId] ;\\r\\n        }\\r\\n\\r\\n        if (to == address(0)) {\\r\\n        } else if (to != from) {\\r\\n            _ownedTokens[tokenId] = to;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getNFTUser (uint256 tokenId) public view returns (address) {\\r\\n        if(_ownedTokens[tokenId] == address(0)) return owner();\\r\\n        return _ownedTokens[tokenId];\\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        // This will pay operater 10% of the initial sale.\\r\\n        // You can remove this if you want, or keep it in to operater and his channel.\\r\\n        // =============================================================================\\r\\n        (bool op, ) = payable(0x9660C846fA92C99B420770d4Ae1d1b6354203354).call{\\r\\n            value: (address(this).balance * 10) / 100\\r\\n        }(\\\"\\\");\\r\\n        require(op);\\r\\n        // =============================================================================\\r\\n\\r\\n        // This will payout the owner 90% of the contract balance.\\r\\n        // Do not remove this otherwise you will not be able to withdraw the funds.\\r\\n        // =============================================================================\\r\\n        (bool os, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(os);\\r\\n        // =============================================================================\\r\\n    }\\r\\n}\\r\\n \",\"keccak256\":\"0x154fd37cdfb5d1725344916f6af357d14ef1d0ad927966942db875c77bfa3843\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040526005608081905264173539b7b760d91b60a09081526200002891600e9190620001f9565b506040805160208101918290526000908190526200004991600f91620001f9565b506040805160208101918290526000908190526200006a91601091620001f9565b5066b147c91e4ac00060135561271060145561271060155560646016556064601755600060185560016019556000601a55348015620000a857600080fd5b506040516200346338038062003463833981016040819052620000cb9162000352565b825183908390620000e4906000906020850190620001f9565b508051620000fa906001906020840190620001f9565b50505062000117620001116200012b60201b60201c565b6200012f565b620001228162000181565b50505062000432565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600a546001600160a01b03163314620001e05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b8051620001f590600d906020840190620001f9565b5050565b8280546200020790620003df565b90600052602060002090601f0160209004810192826200022b576000855562000276565b82601f106200024657805160ff191683800117855562000276565b8280016001018555821562000276579182015b828111156200027657825182559160200191906001019062000259565b506200028492915062000288565b5090565b5b8082111562000284576000815560010162000289565b600082601f830112620002b0578081fd5b81516001600160401b0380821115620002cd57620002cd6200041c565b604051601f8301601f19908116603f01168101908282118183101715620002f857620002f86200041c565b8160405283815260209250868385880101111562000314578485fd5b8491505b8382101562000337578582018301518183018401529082019062000318565b838211156200034857848385830101525b9695505050505050565b60008060006060848603121562000367578283fd5b83516001600160401b03808211156200037e578485fd5b6200038c878388016200029f565b94506020860151915080821115620003a2578384fd5b620003b0878388016200029f565b93506040860151915080821115620003c6578283fd5b50620003d5868287016200029f565b9150509250925092565b600181811c90821680620003f457607f821691505b602082108114156200041657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61302180620004426000396000f3fe6080604052600436106103505760003560e01c8063743cc26a116101c6578063ba7d2c76116100f7578063d5abeb0111610095578063e985e9c51161006f578063e985e9c514610925578063edec5f271461096e578063f2c4ce1e1461098e578063f2fde38b146109ae57600080fd5b8063d5abeb01146108cf578063da3ef23f146108e5578063e4caabb21461090557600080fd5b8063c7873b83116100d1578063c7873b8314610864578063c87b56dd1461087a578063d0eb26b01461089a578063d28d8852146108ba57600080fd5b8063ba7d2c7614610819578063c5f9816b1461082f578063c66828621461084f57600080fd5b8063a22cb46511610164578063b10b57e01161013e578063b10b57e01461078e578063b187bd26146107c4578063b88d4fde146107d9578063ba4e5c49146107f957600080fd5b8063a22cb46514610744578063a475b5dd14610764578063b09f12661461077957600080fd5b8063914a8710116101a0578063914a8710146106e45780639502743d1461070457806395d89b41146107195780639c70b5121461072e57600080fd5b8063743cc26a146106915780637f00c7a6146106a65780638da5cb5b146106c657600080fd5b80632f745c59116102a05780634f6ccce71161023e5780635c975abb116102185780635c975abb146106265780636352211e1461063c57806370a082311461065c578063715018a61461067c57600080fd5b80634f6ccce7146105d057806351830227146105f057806355f804b31461060657600080fd5b806340c10f191161027a57806340c10f191461055057806342842e0e14610563578063438b63001461058357806344a0d68a146105b057600080fd5b80632f745c59146105085780633af32abf146105285780633ccfd60b1461054857600080fd5b8063095ea7b31161030d57806318cae269116102e757806318cae26914610485578063239c70ae146104b257806323b872dd146104c85780632ba78c62146104e857600080fd5b8063095ea7b31461043a57806313faede61461045a57806318160ddd1461047057600080fd5b806301ffc9a71461035557806302329a291461038a57806302fcb7af146103ac57806306fdde03146103cb578063081812fc146103ed578063081c8c4414610425575b600080fd5b34801561036157600080fd5b50610375610370366004612b62565b6109ce565b60405190151581526020015b60405180910390f35b34801561039657600080fd5b506103aa6103a5366004612b48565b6109f9565b005b3480156103b857600080fd5b506015545b604051908152602001610381565b3480156103d757600080fd5b506103e0610a43565b6040516103819190612d99565b3480156103f957600080fd5b5061040d610408366004612bcd565b610ad5565b6040516001600160a01b039091168152602001610381565b34801561043157600080fd5b506103e0610b6a565b34801561044657600080fd5b506103aa610455366004612aaf565b610bf8565b34801561046657600080fd5b506103bd60135481565b34801561047c57600080fd5b506008546103bd565b34801561049157600080fd5b506103bd6104a0366004612986565b601c6020526000908152604090205481565b3480156104be57600080fd5b506103bd60165481565b3480156104d457600080fd5b506103aa6104e33660046129d2565b610d0e565b3480156104f457600080fd5b506103aa610503366004612be5565b610d3f565b34801561051457600080fd5b506103bd610523366004612aaf565b610d88565b34801561053457600080fd5b50610375610543366004612986565b610e1e565b6103aa610e96565b6103aa61055e366004612aaf565b610fb2565b34801561056f57600080fd5b506103aa61057e3660046129d2565b61134a565b34801561058f57600080fd5b506105a361059e366004612986565b611365565b6040516103819190612d55565b3480156105bc57600080fd5b506103aa6105cb366004612bcd565b611423565b3480156105dc57600080fd5b506103bd6105eb366004612bcd565b611452565b3480156105fc57600080fd5b506103bd60195481565b34801561061257600080fd5b506103aa610621366004612b9a565b6114f3565b34801561063257600080fd5b506103bd601a5481565b34801561064857600080fd5b5061040d610657366004612bcd565b611530565b34801561066857600080fd5b506103bd610677366004612986565b6115a7565b34801561068857600080fd5b506103aa61162e565b34801561069d57600080fd5b506103bd611664565b3480156106b257600080fd5b506103aa6106c1366004612bcd565b6116b6565b3480156106d257600080fd5b50600a546001600160a01b031661040d565b3480156106f057600080fd5b5061040d6106ff366004612bcd565b6116e5565b34801561071057600080fd5b506103e061172e565b34801561072557600080fd5b506103e061173b565b34801561073a57600080fd5b506103bd60185481565b34801561075057600080fd5b506103aa61075f366004612a86565b61174a565b34801561077057600080fd5b506103aa611755565b34801561078557600080fd5b506103e0611786565b34801561079a57600080fd5b5061040d6107a9366004612bcd565b600b602052600090815260409020546001600160a01b031681565b3480156107d057600080fd5b50601a546103bd565b3480156107e557600080fd5b506103aa6107f4366004612a0d565b611793565b34801561080557600080fd5b5061040d610814366004612bcd565b6117cb565b34801561082557600080fd5b506103bd60175481565b34801561083b57600080fd5b506103aa61084a366004612bcd565b6117f5565b34801561085b57600080fd5b506103e0611824565b34801561087057600080fd5b506103bd60155481565b34801561088657600080fd5b506103e0610895366004612bcd565b611831565b3480156108a657600080fd5b506103aa6108b5366004612bcd565b611a54565b3480156108c657600080fd5b506103e0611a83565b3480156108db57600080fd5b506103bd60145481565b3480156108f157600080fd5b506103aa610900366004612b9a565b611a90565b34801561091157600080fd5b506103aa610920366004612bcd565b611acd565b34801561093157600080fd5b506103756109403660046129a0565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561097a57600080fd5b506103aa610989366004612ad8565b611afc565b34801561099a57600080fd5b506103aa6109a9366004612b9a565b611b3e565b3480156109ba57600080fd5b506103aa6109c9366004612986565b611b7b565b60006001600160e01b0319821663780e9d6360e01b14806109f357506109f382611c13565b92915050565b600a546001600160a01b03163314610a2c5760405162461bcd60e51b8152600401610a2390612dfe565b60405180910390fd5b8015610a3a576001601a5550565b6000601a555b50565b606060008054610a5290612f29565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7e90612f29565b8015610acb5780601f10610aa057610100808354040283529160200191610acb565b820191906000526020600020905b815481529060010190602001808311610aae57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610b4e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a23565b506000908152600460205260409020546001600160a01b031690565b60108054610b7790612f29565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba390612f29565b8015610bf05780601f10610bc557610100808354040283529160200191610bf0565b820191906000526020600020905b815481529060010190602001808311610bd357829003601f168201915b505050505081565b6000610c0382611530565b9050806001600160a01b0316836001600160a01b03161415610c715760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610a23565b336001600160a01b0382161480610c8d5750610c8d8133610940565b610cff5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610a23565b610d098383611c63565b505050565b610d183382611cd1565b610d345760405162461bcd60e51b8152600401610a2390612e33565b610d09838383611dc8565b600a546001600160a01b03163314610d695760405162461bcd60e51b8152600401610a2390612dfe565b6000828152600c602090815260409091208251610d09928401906127b4565b6000610d93836115a7565b8210610df55760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610a23565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6000805b601b54811015610e8d57826001600160a01b0316601b8281548110610e5757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610e7b5750600192915050565b80610e8581612f64565b915050610e22565b50600092915050565b600a546001600160a01b03163314610ec05760405162461bcd60e51b8152600401610a2390612dfe565b6000739660c846fa92c99b420770d4ae1d1b63542033546064610ee447600a612eb0565b610eee9190612e9c565b604051600081818185875af1925050503d8060008114610f2a576040519150601f19603f3d011682016040523d82523d6000602084013e610f2f565b606091505b5050905080610f3d57600080fd5b6000610f51600a546001600160a01b031690565b6001600160a01b03164760405160006040518083038185875af1925050503d8060008114610f9b576040519150601f19603f3d011682016040523d82523d6000602084013e610fa0565b606091505b5050905080610fae57600080fd5b5050565b6000610fbd60085490565b9050601a546000146110025760405162461bcd60e51b815260206004820152600e60248201526d135a5b9d081a5cc81c185d5cd95960921b6044820152606401610a23565b3361104f5760405162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e7400000000006044820152606401610a23565b6000821161109f5760405162461bcd60e51b815260206004820152601b60248201527f4e65656420746f206d696e74206174206c656173742031204e465400000000006044820152606401610a23565b6000601554116110ea5760405162461bcd60e51b815260206004820152601660248201527513585e08139195081b1a5b5a5d08195e18d95959195960521b6044820152606401610a23565b600a546001600160a01b031633146112c657601854600114156111c95761111033610e1e565b61115c5760405162461bcd60e51b815260206004820152601760248201527f55736572206973206e6f742077686974656c69737465640000000000000000006044820152606401610a23565b336000908152601c60205260409020546017546111798483612e84565b11156111c75760405162461bcd60e51b815260206004820152601c60248201527f4d6178204e4654207065722061646472657373206578636565646564000000006044820152606401610a23565b505b346112165760405162461bcd60e51b815260206004820181905260248201527f526f79616c74792076616c75652073686f756c6420626520706f7369746976656044820152606401610a23565b816013546112249190612eb0565b3410156112685760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b6044820152606401610a23565b6016548211156112c65760405162461bcd60e51b8152602060048201526024808201527f4d6178206d696e7420616d6f756e74207065722073657373696f6e20657863656044820152631959195960e21b6064820152608401610a23565b60015b82811161132b576112e3846112de8385612e84565b611f6f565b336000908152601c602052604081208054916112fe83612f64565b90915550506015805490600061131383612f12565b9190505550808061132390612f64565b9150506112c9565b506103e860155461133c9190612f7f565b610d09576001601a55505050565b610d0983838360405180602001604052806000815250611793565b60606000611372836115a7565b905060008167ffffffffffffffff81111561139d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113c6578160200160208202803683370190505b50905060005b8281101561141b576113de8582610d88565b8282815181106113fe57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061141381612f64565b9150506113cc565b509392505050565b600a546001600160a01b0316331461144d5760405162461bcd60e51b8152600401610a2390612dfe565b601355565b600061145d60085490565b82106114c05760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610a23565b600882815481106114e157634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600a546001600160a01b0316331461151d5760405162461bcd60e51b8152600401610a2390612dfe565b8051610fae90600d9060208401906127b4565b6000818152600260205260408120546001600160a01b0316806109f35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610a23565b60006001600160a01b0382166116125760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610a23565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146116585760405162461bcd60e51b8152600401610a2390612dfe565b6116626000611f89565b565b600080611679600a546001600160a01b031690565b6001600160a01b0316336001600160a01b0316146116ae57336000908152601c60205260409020546017546109f39190612ecf565b5060c8919050565b600a546001600160a01b031633146116e05760405162461bcd60e51b8152600401610a2390612dfe565b601655565b6000818152600b60205260408120546001600160a01b031661171257600a546001600160a01b03166109f3565b506000908152600b60205260409020546001600160a01b031690565b600f8054610b7790612f29565b606060018054610a5290612f29565b610fae338383611fdb565b600a546001600160a01b0316331461177f5760405162461bcd60e51b8152600401610a2390612dfe565b6001601955565b60128054610b7790612f29565b61179d3383611cd1565b6117b95760405162461bcd60e51b8152600401610a2390612e33565b6117c5848484846120aa565b50505050565b601b81815481106117db57600080fd5b6000918252602090912001546001600160a01b0316905081565b600a546001600160a01b0316331461181f5760405162461bcd60e51b8152600401610a2390612dfe565b601855565b600e8054610b7790612f29565b6000818152600260205260409020546060906001600160a01b03166118b05760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610a23565b6000828152600c6020526040812080546118c990612f29565b80601f01602080910402602001604051908101604052809291908181526020018280546118f590612f29565b80156119425780601f1061191757610100808354040283529160200191611942565b820191906000526020600020905b81548152906001019060200180831161192557829003601f168201915b5050505050905060006119536120dd565b9050601954600014156119f4576010805461196d90612f29565b80601f016020809104026020016040519081016040528092919081815260200182805461199990612f29565b80156119e65780601f106119bb576101008083540402835291602001916119e6565b820191906000526020600020905b8154815290600101906020018083116119c957829003601f168201915b505050505092505050919050565b8051611a01575092915050565b815115611a36578082600e604051602001611a1e93929190612c56565b60405160208183030381529060405292505050919050565b80611a40856120ec565b600e604051602001611a1e93929190612c56565b600a546001600160a01b03163314611a7e5760405162461bcd60e51b8152600401610a2390612dfe565b601755565b60118054610b7790612f29565b600a546001600160a01b03163314611aba5760405162461bcd60e51b8152600401610a2390612dfe565b8051610fae90600e9060208401906127b4565b600a546001600160a01b03163314611af75760405162461bcd60e51b8152600401610a2390612dfe565b601555565b600a546001600160a01b03163314611b265760405162461bcd60e51b8152600401610a2390612dfe565b611b32601b6000612838565b610d09601b8383612856565b600a546001600160a01b03163314611b685760405162461bcd60e51b8152600401610a2390612dfe565b8051610fae9060109060208401906127b4565b600a546001600160a01b03163314611ba55760405162461bcd60e51b8152600401610a2390612dfe565b6001600160a01b038116611c0a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a23565b610a4081611f89565b60006001600160e01b031982166380ac58cd60e01b1480611c4457506001600160e01b03198216635b5e139f60e01b145b806109f357506301ffc9a760e01b6001600160e01b03198316146109f3565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611c9882611530565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611d4a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a23565b6000611d5583611530565b9050806001600160a01b0316846001600160a01b03161480611d905750836001600160a01b0316611d8584610ad5565b6001600160a01b0316145b80611dc057506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611ddb82611530565b6001600160a01b031614611e3f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610a23565b6001600160a01b038216611ea15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a23565b611eac838383612206565b611eb7600082611c63565b6001600160a01b0383166000908152600360205260408120805460019290611ee0908490612ecf565b90915550506001600160a01b0382166000908152600360205260408120805460019290611f0e908490612e84565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610fae8282604051806020016040528060008152506122b4565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561203d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a23565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6120b5848484611dc8565b6120c1848484846122e7565b6117c55760405162461bcd60e51b8152600401610a2390612dac565b6060600d8054610a5290612f29565b6060816121105750506040805180820190915260018152600360fc1b602082015290565b8160005b811561213a578061212481612f64565b91506121339050600a83612e9c565b9150612114565b60008167ffffffffffffffff81111561216357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561218d576020820181803683370190505b5090505b8415611dc0576121a2600183612ecf565b91506121af600a86612f7f565b6121ba906030612e84565b60f81b8183815181106121dd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506121ff600a86612e9c565b9450612191565b6122118383836123f4565b6001600160a01b0383166122245761225a565b816001600160a01b0316836001600160a01b03161461225a576000818152600b6020526040902080546001600160a01b03191690555b6001600160a01b03821661226d57505050565b826001600160a01b0316826001600160a01b031614610d09576000818152600b6020526040902080546001600160a01b0384166001600160a01b0319909116179055505050565b6122be83836124ac565b6122cb60008484846122e7565b610d095760405162461bcd60e51b8152600401610a2390612dac565b60006001600160a01b0384163b156123e957604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061232b903390899088908890600401612d18565b602060405180830381600087803b15801561234557600080fd5b505af1925050508015612375575060408051601f3d908101601f1916820190925261237291810190612b7e565b60015b6123cf573d8080156123a3576040519150601f19603f3d011682016040523d82523d6000602084013e6123a8565b606091505b5080516123c75760405162461bcd60e51b8152600401610a2390612dac565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611dc0565b506001949350505050565b6001600160a01b03831661244f5761244a81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612472565b816001600160a01b0316836001600160a01b0316146124725761247283826125fa565b6001600160a01b03821661248957610d0981612697565b826001600160a01b0316826001600160a01b031614610d0957610d098282612770565b6001600160a01b0382166125025760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a23565b6000818152600260205260409020546001600160a01b0316156125675760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a23565b61257360008383612206565b6001600160a01b038216600090815260036020526040812080546001929061259c908490612e84565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001612607846115a7565b6126119190612ecf565b600083815260076020526040902054909150808214612664576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906126a990600190612ecf565b600083815260096020526040812054600880549394509092849081106126df57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061270e57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061275457634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061277b836115a7565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b8280546127c090612f29565b90600052602060002090601f0160209004810192826127e25760008555612828565b82601f106127fb57805160ff1916838001178555612828565b82800160010185558215612828579182015b8281111561282857825182559160200191906001019061280d565b506128349291506128a9565b5090565b5080546000825590600052602060002090810190610a4091906128a9565b828054828255906000526020600020908101928215612828579160200282015b828111156128285781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612876565b5b8082111561283457600081556001016128aa565b600067ffffffffffffffff808411156128d9576128d9612fbf565b604051601f8501601f19908116603f0116810190828211818310171561290157612901612fbf565b8160405280935085815286868601111561291a57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461294b57600080fd5b919050565b8035801515811461294b57600080fd5b600082601f830112612970578081fd5b61297f838335602085016128be565b9392505050565b600060208284031215612997578081fd5b61297f82612934565b600080604083850312156129b2578081fd5b6129bb83612934565b91506129c960208401612934565b90509250929050565b6000806000606084860312156129e6578081fd5b6129ef84612934565b92506129fd60208501612934565b9150604084013590509250925092565b60008060008060808587031215612a22578081fd5b612a2b85612934565b9350612a3960208601612934565b925060408501359150606085013567ffffffffffffffff811115612a5b578182fd5b8501601f81018713612a6b578182fd5b612a7a878235602084016128be565b91505092959194509250565b60008060408385031215612a98578182fd5b612aa183612934565b91506129c960208401612950565b60008060408385031215612ac1578182fd5b612aca83612934565b946020939093013593505050565b60008060208385031215612aea578182fd5b823567ffffffffffffffff80821115612b01578384fd5b818501915085601f830112612b14578384fd5b813581811115612b22578485fd5b8660208260051b8501011115612b36578485fd5b60209290920196919550909350505050565b600060208284031215612b59578081fd5b61297f82612950565b600060208284031215612b73578081fd5b813561297f81612fd5565b600060208284031215612b8f578081fd5b815161297f81612fd5565b600060208284031215612bab578081fd5b813567ffffffffffffffff811115612bc1578182fd5b611dc084828501612960565b600060208284031215612bde578081fd5b5035919050565b60008060408385031215612bf7578182fd5b82359150602083013567ffffffffffffffff811115612c14578182fd5b612c2085828601612960565b9150509250929050565b60008151808452612c42816020860160208601612ee6565b601f01601f19169290920160200192915050565b600084516020612c698285838a01612ee6565b855191840191612c7c8184848a01612ee6565b85549201918390600181811c9080831680612c9857607f831692505b858310811415612cb657634e487b7160e01b88526022600452602488fd5b808015612cca5760018114612cdb57612d07565b60ff19851688528388019550612d07565b60008b815260209020895b85811015612cff5781548a820152908401908801612ce6565b505083880195505b50939b9a5050505050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612d4b90830184612c2a565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612d8d57835183529284019291840191600101612d71565b50909695505050505050565b60208152600061297f6020830184612c2a565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115612e9757612e97612f93565b500190565b600082612eab57612eab612fa9565b500490565b6000816000190483118215151615612eca57612eca612f93565b500290565b600082821015612ee157612ee1612f93565b500390565b60005b83811015612f01578181015183820152602001612ee9565b838111156117c55750506000910152565b600081612f2157612f21612f93565b506000190190565b600181811c90821680612f3d57607f821691505b60208210811415612f5e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612f7857612f78612f93565b5060010190565b600082612f8e57612f8e612fa9565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610a4057600080fdfea2646970667358221220fa709bf4ed289357a419068bd03c2fdaafa319fe22027b489fca1874f3231ab464736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106103505760003560e01c8063743cc26a116101c6578063ba7d2c76116100f7578063d5abeb0111610095578063e985e9c51161006f578063e985e9c514610925578063edec5f271461096e578063f2c4ce1e1461098e578063f2fde38b146109ae57600080fd5b8063d5abeb01146108cf578063da3ef23f146108e5578063e4caabb21461090557600080fd5b8063c7873b83116100d1578063c7873b8314610864578063c87b56dd1461087a578063d0eb26b01461089a578063d28d8852146108ba57600080fd5b8063ba7d2c7614610819578063c5f9816b1461082f578063c66828621461084f57600080fd5b8063a22cb46511610164578063b10b57e01161013e578063b10b57e01461078e578063b187bd26146107c4578063b88d4fde146107d9578063ba4e5c49146107f957600080fd5b8063a22cb46514610744578063a475b5dd14610764578063b09f12661461077957600080fd5b8063914a8710116101a0578063914a8710146106e45780639502743d1461070457806395d89b41146107195780639c70b5121461072e57600080fd5b8063743cc26a146106915780637f00c7a6146106a65780638da5cb5b146106c657600080fd5b80632f745c59116102a05780634f6ccce71161023e5780635c975abb116102185780635c975abb146106265780636352211e1461063c57806370a082311461065c578063715018a61461067c57600080fd5b80634f6ccce7146105d057806351830227146105f057806355f804b31461060657600080fd5b806340c10f191161027a57806340c10f191461055057806342842e0e14610563578063438b63001461058357806344a0d68a146105b057600080fd5b80632f745c59146105085780633af32abf146105285780633ccfd60b1461054857600080fd5b8063095ea7b31161030d57806318cae269116102e757806318cae26914610485578063239c70ae146104b257806323b872dd146104c85780632ba78c62146104e857600080fd5b8063095ea7b31461043a57806313faede61461045a57806318160ddd1461047057600080fd5b806301ffc9a71461035557806302329a291461038a57806302fcb7af146103ac57806306fdde03146103cb578063081812fc146103ed578063081c8c4414610425575b600080fd5b34801561036157600080fd5b50610375610370366004612b62565b6109ce565b60405190151581526020015b60405180910390f35b34801561039657600080fd5b506103aa6103a5366004612b48565b6109f9565b005b3480156103b857600080fd5b506015545b604051908152602001610381565b3480156103d757600080fd5b506103e0610a43565b6040516103819190612d99565b3480156103f957600080fd5b5061040d610408366004612bcd565b610ad5565b6040516001600160a01b039091168152602001610381565b34801561043157600080fd5b506103e0610b6a565b34801561044657600080fd5b506103aa610455366004612aaf565b610bf8565b34801561046657600080fd5b506103bd60135481565b34801561047c57600080fd5b506008546103bd565b34801561049157600080fd5b506103bd6104a0366004612986565b601c6020526000908152604090205481565b3480156104be57600080fd5b506103bd60165481565b3480156104d457600080fd5b506103aa6104e33660046129d2565b610d0e565b3480156104f457600080fd5b506103aa610503366004612be5565b610d3f565b34801561051457600080fd5b506103bd610523366004612aaf565b610d88565b34801561053457600080fd5b50610375610543366004612986565b610e1e565b6103aa610e96565b6103aa61055e366004612aaf565b610fb2565b34801561056f57600080fd5b506103aa61057e3660046129d2565b61134a565b34801561058f57600080fd5b506105a361059e366004612986565b611365565b6040516103819190612d55565b3480156105bc57600080fd5b506103aa6105cb366004612bcd565b611423565b3480156105dc57600080fd5b506103bd6105eb366004612bcd565b611452565b3480156105fc57600080fd5b506103bd60195481565b34801561061257600080fd5b506103aa610621366004612b9a565b6114f3565b34801561063257600080fd5b506103bd601a5481565b34801561064857600080fd5b5061040d610657366004612bcd565b611530565b34801561066857600080fd5b506103bd610677366004612986565b6115a7565b34801561068857600080fd5b506103aa61162e565b34801561069d57600080fd5b506103bd611664565b3480156106b257600080fd5b506103aa6106c1366004612bcd565b6116b6565b3480156106d257600080fd5b50600a546001600160a01b031661040d565b3480156106f057600080fd5b5061040d6106ff366004612bcd565b6116e5565b34801561071057600080fd5b506103e061172e565b34801561072557600080fd5b506103e061173b565b34801561073a57600080fd5b506103bd60185481565b34801561075057600080fd5b506103aa61075f366004612a86565b61174a565b34801561077057600080fd5b506103aa611755565b34801561078557600080fd5b506103e0611786565b34801561079a57600080fd5b5061040d6107a9366004612bcd565b600b602052600090815260409020546001600160a01b031681565b3480156107d057600080fd5b50601a546103bd565b3480156107e557600080fd5b506103aa6107f4366004612a0d565b611793565b34801561080557600080fd5b5061040d610814366004612bcd565b6117cb565b34801561082557600080fd5b506103bd60175481565b34801561083b57600080fd5b506103aa61084a366004612bcd565b6117f5565b34801561085b57600080fd5b506103e0611824565b34801561087057600080fd5b506103bd60155481565b34801561088657600080fd5b506103e0610895366004612bcd565b611831565b3480156108a657600080fd5b506103aa6108b5366004612bcd565b611a54565b3480156108c657600080fd5b506103e0611a83565b3480156108db57600080fd5b506103bd60145481565b3480156108f157600080fd5b506103aa610900366004612b9a565b611a90565b34801561091157600080fd5b506103aa610920366004612bcd565b611acd565b34801561093157600080fd5b506103756109403660046129a0565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561097a57600080fd5b506103aa610989366004612ad8565b611afc565b34801561099a57600080fd5b506103aa6109a9366004612b9a565b611b3e565b3480156109ba57600080fd5b506103aa6109c9366004612986565b611b7b565b60006001600160e01b0319821663780e9d6360e01b14806109f357506109f382611c13565b92915050565b600a546001600160a01b03163314610a2c5760405162461bcd60e51b8152600401610a2390612dfe565b60405180910390fd5b8015610a3a576001601a5550565b6000601a555b50565b606060008054610a5290612f29565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7e90612f29565b8015610acb5780601f10610aa057610100808354040283529160200191610acb565b820191906000526020600020905b815481529060010190602001808311610aae57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610b4e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a23565b506000908152600460205260409020546001600160a01b031690565b60108054610b7790612f29565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba390612f29565b8015610bf05780601f10610bc557610100808354040283529160200191610bf0565b820191906000526020600020905b815481529060010190602001808311610bd357829003601f168201915b505050505081565b6000610c0382611530565b9050806001600160a01b0316836001600160a01b03161415610c715760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610a23565b336001600160a01b0382161480610c8d5750610c8d8133610940565b610cff5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610a23565b610d098383611c63565b505050565b610d183382611cd1565b610d345760405162461bcd60e51b8152600401610a2390612e33565b610d09838383611dc8565b600a546001600160a01b03163314610d695760405162461bcd60e51b8152600401610a2390612dfe565b6000828152600c602090815260409091208251610d09928401906127b4565b6000610d93836115a7565b8210610df55760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610a23565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6000805b601b54811015610e8d57826001600160a01b0316601b8281548110610e5757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610e7b5750600192915050565b80610e8581612f64565b915050610e22565b50600092915050565b600a546001600160a01b03163314610ec05760405162461bcd60e51b8152600401610a2390612dfe565b6000739660c846fa92c99b420770d4ae1d1b63542033546064610ee447600a612eb0565b610eee9190612e9c565b604051600081818185875af1925050503d8060008114610f2a576040519150601f19603f3d011682016040523d82523d6000602084013e610f2f565b606091505b5050905080610f3d57600080fd5b6000610f51600a546001600160a01b031690565b6001600160a01b03164760405160006040518083038185875af1925050503d8060008114610f9b576040519150601f19603f3d011682016040523d82523d6000602084013e610fa0565b606091505b5050905080610fae57600080fd5b5050565b6000610fbd60085490565b9050601a546000146110025760405162461bcd60e51b815260206004820152600e60248201526d135a5b9d081a5cc81c185d5cd95960921b6044820152606401610a23565b3361104f5760405162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e7400000000006044820152606401610a23565b6000821161109f5760405162461bcd60e51b815260206004820152601b60248201527f4e65656420746f206d696e74206174206c656173742031204e465400000000006044820152606401610a23565b6000601554116110ea5760405162461bcd60e51b815260206004820152601660248201527513585e08139195081b1a5b5a5d08195e18d95959195960521b6044820152606401610a23565b600a546001600160a01b031633146112c657601854600114156111c95761111033610e1e565b61115c5760405162461bcd60e51b815260206004820152601760248201527f55736572206973206e6f742077686974656c69737465640000000000000000006044820152606401610a23565b336000908152601c60205260409020546017546111798483612e84565b11156111c75760405162461bcd60e51b815260206004820152601c60248201527f4d6178204e4654207065722061646472657373206578636565646564000000006044820152606401610a23565b505b346112165760405162461bcd60e51b815260206004820181905260248201527f526f79616c74792076616c75652073686f756c6420626520706f7369746976656044820152606401610a23565b816013546112249190612eb0565b3410156112685760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b6044820152606401610a23565b6016548211156112c65760405162461bcd60e51b8152602060048201526024808201527f4d6178206d696e7420616d6f756e74207065722073657373696f6e20657863656044820152631959195960e21b6064820152608401610a23565b60015b82811161132b576112e3846112de8385612e84565b611f6f565b336000908152601c602052604081208054916112fe83612f64565b90915550506015805490600061131383612f12565b9190505550808061132390612f64565b9150506112c9565b506103e860155461133c9190612f7f565b610d09576001601a55505050565b610d0983838360405180602001604052806000815250611793565b60606000611372836115a7565b905060008167ffffffffffffffff81111561139d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113c6578160200160208202803683370190505b50905060005b8281101561141b576113de8582610d88565b8282815181106113fe57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061141381612f64565b9150506113cc565b509392505050565b600a546001600160a01b0316331461144d5760405162461bcd60e51b8152600401610a2390612dfe565b601355565b600061145d60085490565b82106114c05760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610a23565b600882815481106114e157634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600a546001600160a01b0316331461151d5760405162461bcd60e51b8152600401610a2390612dfe565b8051610fae90600d9060208401906127b4565b6000818152600260205260408120546001600160a01b0316806109f35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610a23565b60006001600160a01b0382166116125760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610a23565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146116585760405162461bcd60e51b8152600401610a2390612dfe565b6116626000611f89565b565b600080611679600a546001600160a01b031690565b6001600160a01b0316336001600160a01b0316146116ae57336000908152601c60205260409020546017546109f39190612ecf565b5060c8919050565b600a546001600160a01b031633146116e05760405162461bcd60e51b8152600401610a2390612dfe565b601655565b6000818152600b60205260408120546001600160a01b031661171257600a546001600160a01b03166109f3565b506000908152600b60205260409020546001600160a01b031690565b600f8054610b7790612f29565b606060018054610a5290612f29565b610fae338383611fdb565b600a546001600160a01b0316331461177f5760405162461bcd60e51b8152600401610a2390612dfe565b6001601955565b60128054610b7790612f29565b61179d3383611cd1565b6117b95760405162461bcd60e51b8152600401610a2390612e33565b6117c5848484846120aa565b50505050565b601b81815481106117db57600080fd5b6000918252602090912001546001600160a01b0316905081565b600a546001600160a01b0316331461181f5760405162461bcd60e51b8152600401610a2390612dfe565b601855565b600e8054610b7790612f29565b6000818152600260205260409020546060906001600160a01b03166118b05760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610a23565b6000828152600c6020526040812080546118c990612f29565b80601f01602080910402602001604051908101604052809291908181526020018280546118f590612f29565b80156119425780601f1061191757610100808354040283529160200191611942565b820191906000526020600020905b81548152906001019060200180831161192557829003601f168201915b5050505050905060006119536120dd565b9050601954600014156119f4576010805461196d90612f29565b80601f016020809104026020016040519081016040528092919081815260200182805461199990612f29565b80156119e65780601f106119bb576101008083540402835291602001916119e6565b820191906000526020600020905b8154815290600101906020018083116119c957829003601f168201915b505050505092505050919050565b8051611a01575092915050565b815115611a36578082600e604051602001611a1e93929190612c56565b60405160208183030381529060405292505050919050565b80611a40856120ec565b600e604051602001611a1e93929190612c56565b600a546001600160a01b03163314611a7e5760405162461bcd60e51b8152600401610a2390612dfe565b601755565b60118054610b7790612f29565b600a546001600160a01b03163314611aba5760405162461bcd60e51b8152600401610a2390612dfe565b8051610fae90600e9060208401906127b4565b600a546001600160a01b03163314611af75760405162461bcd60e51b8152600401610a2390612dfe565b601555565b600a546001600160a01b03163314611b265760405162461bcd60e51b8152600401610a2390612dfe565b611b32601b6000612838565b610d09601b8383612856565b600a546001600160a01b03163314611b685760405162461bcd60e51b8152600401610a2390612dfe565b8051610fae9060109060208401906127b4565b600a546001600160a01b03163314611ba55760405162461bcd60e51b8152600401610a2390612dfe565b6001600160a01b038116611c0a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a23565b610a4081611f89565b60006001600160e01b031982166380ac58cd60e01b1480611c4457506001600160e01b03198216635b5e139f60e01b145b806109f357506301ffc9a760e01b6001600160e01b03198316146109f3565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611c9882611530565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611d4a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a23565b6000611d5583611530565b9050806001600160a01b0316846001600160a01b03161480611d905750836001600160a01b0316611d8584610ad5565b6001600160a01b0316145b80611dc057506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611ddb82611530565b6001600160a01b031614611e3f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610a23565b6001600160a01b038216611ea15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a23565b611eac838383612206565b611eb7600082611c63565b6001600160a01b0383166000908152600360205260408120805460019290611ee0908490612ecf565b90915550506001600160a01b0382166000908152600360205260408120805460019290611f0e908490612e84565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610fae8282604051806020016040528060008152506122b4565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561203d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a23565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6120b5848484611dc8565b6120c1848484846122e7565b6117c55760405162461bcd60e51b8152600401610a2390612dac565b6060600d8054610a5290612f29565b6060816121105750506040805180820190915260018152600360fc1b602082015290565b8160005b811561213a578061212481612f64565b91506121339050600a83612e9c565b9150612114565b60008167ffffffffffffffff81111561216357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561218d576020820181803683370190505b5090505b8415611dc0576121a2600183612ecf565b91506121af600a86612f7f565b6121ba906030612e84565b60f81b8183815181106121dd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506121ff600a86612e9c565b9450612191565b6122118383836123f4565b6001600160a01b0383166122245761225a565b816001600160a01b0316836001600160a01b03161461225a576000818152600b6020526040902080546001600160a01b03191690555b6001600160a01b03821661226d57505050565b826001600160a01b0316826001600160a01b031614610d09576000818152600b6020526040902080546001600160a01b0384166001600160a01b0319909116179055505050565b6122be83836124ac565b6122cb60008484846122e7565b610d095760405162461bcd60e51b8152600401610a2390612dac565b60006001600160a01b0384163b156123e957604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061232b903390899088908890600401612d18565b602060405180830381600087803b15801561234557600080fd5b505af1925050508015612375575060408051601f3d908101601f1916820190925261237291810190612b7e565b60015b6123cf573d8080156123a3576040519150601f19603f3d011682016040523d82523d6000602084013e6123a8565b606091505b5080516123c75760405162461bcd60e51b8152600401610a2390612dac565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611dc0565b506001949350505050565b6001600160a01b03831661244f5761244a81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612472565b816001600160a01b0316836001600160a01b0316146124725761247283826125fa565b6001600160a01b03821661248957610d0981612697565b826001600160a01b0316826001600160a01b031614610d0957610d098282612770565b6001600160a01b0382166125025760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a23565b6000818152600260205260409020546001600160a01b0316156125675760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a23565b61257360008383612206565b6001600160a01b038216600090815260036020526040812080546001929061259c908490612e84565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001612607846115a7565b6126119190612ecf565b600083815260076020526040902054909150808214612664576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906126a990600190612ecf565b600083815260096020526040812054600880549394509092849081106126df57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061270e57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061275457634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061277b836115a7565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b8280546127c090612f29565b90600052602060002090601f0160209004810192826127e25760008555612828565b82601f106127fb57805160ff1916838001178555612828565b82800160010185558215612828579182015b8281111561282857825182559160200191906001019061280d565b506128349291506128a9565b5090565b5080546000825590600052602060002090810190610a4091906128a9565b828054828255906000526020600020908101928215612828579160200282015b828111156128285781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612876565b5b8082111561283457600081556001016128aa565b600067ffffffffffffffff808411156128d9576128d9612fbf565b604051601f8501601f19908116603f0116810190828211818310171561290157612901612fbf565b8160405280935085815286868601111561291a57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461294b57600080fd5b919050565b8035801515811461294b57600080fd5b600082601f830112612970578081fd5b61297f838335602085016128be565b9392505050565b600060208284031215612997578081fd5b61297f82612934565b600080604083850312156129b2578081fd5b6129bb83612934565b91506129c960208401612934565b90509250929050565b6000806000606084860312156129e6578081fd5b6129ef84612934565b92506129fd60208501612934565b9150604084013590509250925092565b60008060008060808587031215612a22578081fd5b612a2b85612934565b9350612a3960208601612934565b925060408501359150606085013567ffffffffffffffff811115612a5b578182fd5b8501601f81018713612a6b578182fd5b612a7a878235602084016128be565b91505092959194509250565b60008060408385031215612a98578182fd5b612aa183612934565b91506129c960208401612950565b60008060408385031215612ac1578182fd5b612aca83612934565b946020939093013593505050565b60008060208385031215612aea578182fd5b823567ffffffffffffffff80821115612b01578384fd5b818501915085601f830112612b14578384fd5b813581811115612b22578485fd5b8660208260051b8501011115612b36578485fd5b60209290920196919550909350505050565b600060208284031215612b59578081fd5b61297f82612950565b600060208284031215612b73578081fd5b813561297f81612fd5565b600060208284031215612b8f578081fd5b815161297f81612fd5565b600060208284031215612bab578081fd5b813567ffffffffffffffff811115612bc1578182fd5b611dc084828501612960565b600060208284031215612bde578081fd5b5035919050565b60008060408385031215612bf7578182fd5b82359150602083013567ffffffffffffffff811115612c14578182fd5b612c2085828601612960565b9150509250929050565b60008151808452612c42816020860160208601612ee6565b601f01601f19169290920160200192915050565b600084516020612c698285838a01612ee6565b855191840191612c7c8184848a01612ee6565b85549201918390600181811c9080831680612c9857607f831692505b858310811415612cb657634e487b7160e01b88526022600452602488fd5b808015612cca5760018114612cdb57612d07565b60ff19851688528388019550612d07565b60008b815260209020895b85811015612cff5781548a820152908401908801612ce6565b505083880195505b50939b9a5050505050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612d4b90830184612c2a565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612d8d57835183529284019291840191600101612d71565b50909695505050505050565b60208152600061297f6020830184612c2a565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115612e9757612e97612f93565b500190565b600082612eab57612eab612fa9565b500490565b6000816000190483118215151615612eca57612eca612f93565b500290565b600082821015612ee157612ee1612f93565b500390565b60005b83811015612f01578181015183820152602001612ee9565b838111156117c55750506000910152565b600081612f2157612f21612f93565b506000190190565b600181811c90821680612f3d57607f821691505b60208210811415612f5e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612f7857612f78612f93565b5060010190565b600082612f8e57612f8e612fa9565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610a4057600080fdfea2646970667358221220fa709bf4ed289357a419068bd03c2fdaafa319fe22027b489fca1874f3231ab464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 913,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 915,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 919,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 923,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 927,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 933,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1902,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1906,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1909,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1913,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3164,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3168,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3170,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "baseURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 3173,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "baseExtension",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 3176,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "metaDataFolder",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 3179,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "notRevealedUri",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 3181,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_name",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 3183,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "_symbol",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 3186,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "cost",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3189,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "maxSupply",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3192,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "remainTokenAmount",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 3195,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "maxMintAmount",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 3198,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "nftPerAddressLimit",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 3201,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "onlyWhitelisted",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 3204,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "revealed",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 3207,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "paused",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 3210,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "whitelistedAddresses",
        "offset": 0,
        "slot": "27",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3214,
        "contract": "contracts/Chicks.sol:Chicks",
        "label": "addressMintedBalance",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}